This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-03-19T00:46:33.954Z

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.github/
  workflows/
    ci.yml
public/
  vercel.svg
src/
  components/
    chat/
      MessageDisplay.tsx
      PromptInput.tsx
    layout/
      Header.tsx
      Layout.tsx
      MenuDropdown.tsx
    HelloWorld.tsx
  contexts/
    ConversationContext.tsx
  pages/
    api/
      hello.ts
    _app.tsx
    chat.tsx
    hello.tsx
  styles/
    global.css
    Home.module.css
  test/
    __mocks__/
      openai.ts
    mocks/
      openai.ts
      validateResponseSetup.ts
    ChatPage.test.tsx
    ConversationContext.test.tsx
    MessageDisplay.test.tsx
    PromptInput.test.tsx
    setup.ts
    vitest.d.ts
  ui-kit/
    __mocks__/
      gsap.ts
    icons/
      IconAdd.test.tsx
      IconAdd.tsx
      IconArrowDown.test.tsx
      IconArrowDown.tsx
      IconArrowDownUp.test.tsx
      IconArrowDownUp.tsx
      IconArrowLeft.test.tsx
      IconArrowLeft.tsx
      IconButton.test.tsx
      IconButton.tsx
      IconCheck.test.tsx
      IconCheck.tsx
      IconCopy.test.tsx
      IconCopy.tsx
      IconCreate.test.tsx
      IconCreate.tsx
      IconDelete.test.tsx
      IconDelete.tsx
      IconDownload.test.tsx
      IconDownload.tsx
      IconEdit.test.tsx
      IconEdit.tsx
      IconError.test.tsx
      IconError.tsx
      IconHelp.test.tsx
      IconHelp.tsx
      IconLike.test.tsx
      IconLike.tsx
      IconLogo.test.tsx
      IconLogo.tsx
      IconMenu.test.tsx
      IconMenu.tsx
      IconMinus.test.tsx
      IconMinus.tsx
      IconPlus.test.tsx
      IconPlus.tsx
      IconRedo.test.tsx
      IconRedo.tsx
      IconReload.test.tsx
      IconReload.tsx
      IconSave.test.tsx
      IconSave.tsx
      IconSearch.test.tsx
      IconSearch.tsx
      IconSend.test.tsx
      IconSend.tsx
      IconSettings.test.tsx
      IconSettings.tsx
      IconUser.test.tsx
      IconUser.tsx
      types.ts
    utils/
      cn.ts
    Button.test.tsx
    Button.tsx
    Dropdown.test.tsx
    Dropdown.tsx
    Radio.test.tsx
    Radio.tsx
    TextArea.test.tsx
    TextArea.tsx
    TextInput.test.tsx
    TextInput.tsx
.dockerignore
.editorconfig
.env-sample
.eslintignore
.eslintrc.json
.gitignore
.prettierignore
.prettierrc
Dockerfile
next-env.d.ts
next.config.js
package.json
postcss.config.js
README.md
tailwind.config.js
tsconfig.json
vitest.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".github/workflows/ci.yml">
name: CI
run-name: ${{ github.actor }} triggered CI workflow
on:
  pull_request:

jobs:
  main:
    name: Lint and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.19.0'
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: Verify lockfile
        run: |
          if [ ! -f "pnpm-lock.yaml" ]; then
            echo "pnpm-lock.yaml not found!"
            exit 1
          fi
          echo "pnpm-lock.yaml found"
          cat pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install

      - name: Run ESLint
        run: pnpm lint

      - name: Run Vitest
        run: pnpm test

      - name: Run Format Check
        run: pnpm format
</file>

<file path="public/vercel.svg">
<svg width="283" height="64" viewBox="0 0 283 64" fill="none" 
    xmlns="http://www.w3.org/2000/svg">
    <path d="M141.04 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.46 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM248.72 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.45 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM200.24 34c0 6 3.92 10 10 10 4.12 0 7.21-1.87 8.8-4.92l7.68 4.43c-3.18 5.3-9.14 8.49-16.48 8.49-11.05 0-19-7.2-19-18s7.96-18 19-18c7.34 0 13.29 3.19 16.48 8.49l-7.68 4.43c-1.59-3.05-4.68-4.92-8.8-4.92-6.07 0-10 4-10 10zm82.48-29v46h-9V5h9zM36.95 0L73.9 64H0L36.95 0zm92.38 5l-27.71 48L73.91 5H84.3l17.32 30 17.32-30h10.39zm58.91 12v9.69c-1-.29-2.06-.49-3.2-.49-5.81 0-10 4-10 10V51h-9V17h9v9.2c0-5.08 5.91-9.2 13.2-9.2z" fill="#000"/>
</svg>
</file>

<file path="src/components/chat/MessageDisplay.tsx">
import React, { useRef, useEffect } from 'react';
import { useConversation } from '@/contexts/ConversationContext';
import { cn } from '@/ui-kit/utils/cn';

const MessageDisplay: React.FC = () => {
  const { conversationHistory } = useConversation();
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // Auto-scroll to bottom when messages change
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [conversationHistory]);

  // Determine message style based on role
  const getMessageClasses = (role: string) => {
    switch (role) {
      case 'user':
        return 'bg-blue-100 text-blue-800 self-end';
      case 'system':
        return 'bg-gray-100 text-gray-800 italic';
      case 'assistant':
        return 'bg-green-100 text-green-800 self-start';
      default:
        return '';
    }
  };

  // Render empty state if no messages
  if (conversationHistory.length === 0) {
    return (
      <div className="flex items-center justify-center h-full text-gray-500">
        No messages yet. Start a conversation!
      </div>
    );
  }

  return (
    <div className="flex flex-col space-y-4 p-4 overflow-y-auto max-h-[calc(100vh-300px)]">
      {conversationHistory.map(message => (
        <div
          key={message.id}
          className={cn('max-w-[80%] p-3 rounded-lg', getMessageClasses(message.role))}
        >
          {message.content}
        </div>
      ))}
      <div ref={messagesEndRef} />
    </div>
  );
};

export default MessageDisplay;
</file>

<file path="src/components/chat/PromptInput.tsx">
import React, { useState } from 'react';
import { TextArea } from '@/ui-kit/TextArea';
import { Button } from '@/ui-kit/Button';
import { IconSend } from '@/ui-kit/icons/IconSend';
import { useConversation } from '@/contexts/ConversationContext';
import { v4 as uuidv4 } from 'uuid';

const PromptInput: React.FC = () => {
  // State Management
  const [systemPrompt, setSystemPrompt] = useState<string>('');
  const [userPrompt, setUserPrompt] = useState<string>('');

  // Use Conversation Context
  const {
    addMessageToHistory,
    setSystemPrompt: setContextSystemPrompt,
    setUserPrompt: setContextUserPrompt,
  } = useConversation();

  // Send Message Handler
  const handleSendMessage = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    // Validate input
    if (!userPrompt.trim()) return;

    // Add system prompt to context if exists
    if (systemPrompt.trim()) {
      addMessageToHistory({
        id: uuidv4(),
        role: 'system',
        content: systemPrompt.trim(),
        timestamp: new Date(),
      });
      setContextSystemPrompt(systemPrompt.trim());
    }

    // Add user message to history
    addMessageToHistory({
      id: uuidv4(),
      role: 'user',
      content: userPrompt.trim(),
      timestamp: new Date(),
    });

    // Update context user prompt
    setContextUserPrompt(userPrompt.trim());

    // Clear input fields
    setSystemPrompt('');
    setUserPrompt('');
  };

  return (
    <form
      onSubmit={handleSendMessage}
      className="flex flex-col space-y-4 p-4 bg-white border border-gray-200 rounded-lg shadow-sm
        transition-all duration-300 ease-in-out
        hover:shadow-md focus-within:ring-2 focus-within:ring-primary focus-within:border-transparent"
    >
      {/* System Prompt Input */}
      <TextArea
        value={systemPrompt}
        onChange={e => setSystemPrompt(e.target.value)}
        placeholder="Enter system prompt (optional)"
        className="w-full transition-colors duration-300
          focus:border-primary focus:ring-1 focus:ring-primary
          hover:border-gray-300"
        rows={2}
      />

      {/* User Prompt Input */}
      <TextArea
        value={userPrompt}
        onChange={e => setUserPrompt(e.target.value)}
        placeholder="Enter your message"
        className="w-full transition-colors duration-300
          focus:border-primary focus:ring-1 focus:ring-primary
          hover:border-gray-300"
        rows={4}
        required
      />

      {/* Send Button */}
      <div className="flex justify-end">
        <Button
          type="submit"
          variant="primary"
          disabled={!userPrompt.trim()}
          className="flex items-center space-x-2
            transition-all duration-300 ease-in-out
            disabled:opacity-50 disabled:cursor-not-allowed
            hover:bg-primary-hover focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2"
        >
          <span>Send</span>
          <IconSend className="w-5 h-5 transition-transform duration-300 group-hover:translate-x-1" />
        </Button>
      </div>
    </form>
  );
};

export default PromptInput;
</file>

<file path="src/components/layout/Header.tsx">
import React from 'react';
import Link from 'next/link';
import { MenuDropdown } from './MenuDropdown';

const menuItems = [
  { label: 'Train', href: '/french-idol' },
  { label: 'Results', href: '/results' },
  { label: 'Profile', href: '/profile' },
  { label: 'Create Stories', href: '/french-idol/create' },
  { label: 'Grade Levels', href: '/grade-levels' },
];

export const Header: React.FC = () => {
  return (
    <header className="fixed top-0 w-full bg-white shadow-sm z-50">
      <div className="container mx-auto px-4 h-16 flex items-center justify-between">
        <Link href="/" className="text-xl font-bold text-gray-800">
          Secure ChatGPT
        </Link>
        <MenuDropdown items={menuItems} />
      </div>
    </header>
  );
};
</file>

<file path="src/components/layout/Layout.tsx">
import React, { ReactNode } from 'react';
import { Header } from './Header';

interface LayoutProps {
  children: ReactNode;
}

export const Layout: React.FC<LayoutProps> = ({ children }) => {
  return (
    <div className="min-h-screen bg-gray-50">
      <Header />
      <main className="pt-16">{children}</main>
    </div>
  );
};
</file>

<file path="src/components/layout/MenuDropdown.tsx">
import React, { useState, useRef, useEffect } from 'react';
import Link from 'next/link';
import { IconMenu } from '../../ui-kit/icons/IconMenu';

interface MenuItem {
  label: string;
  href: string;
}

interface MenuDropdownProps {
  items: MenuItem[];
}

export const MenuDropdown: React.FC<MenuDropdownProps> = ({ items }) => {
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const handleItemClick = (href: string) => {
    if (href === '#') {
      alert('Coming Soon!');
    }
    setIsOpen(false);
  };

  return (
    <div className="relative" ref={dropdownRef}>
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="p-2 hover:bg-gray-100 rounded-full transition-colors duration-200"
        aria-label="Menu"
      >
        <IconMenu size={24} />
      </button>

      {/* Dropdown Panel */}
      {/* Mobile Overlay */}
      {isOpen && (
        <div
          className="fixed inset-0 bg-black bg-opacity-50 z-40 md:hidden"
          onClick={() => setIsOpen(false)}
        />
      )}

      {/* Dropdown Panel */}
      <div
        className={`
          fixed inset-y-0 right-0 w-64 bg-white z-50 transform transition-all duration-200 ease-in-out
          md:absolute md:inset-auto md:right-0 md:top-full md:mt-1 md:w-48 md:rounded-lg md:shadow-lg
          ${
            isOpen
              ? 'translate-x-0'
              : 'translate-x-full md:translate-y-2 md:opacity-0 md:pointer-events-none'
          }
        `}
      >
        {/* Mobile Close Button */}
        <div className="sticky top-0 p-4 border-b border-gray-200 bg-white md:hidden flex items-center justify-between">
          <span className="font-medium">Menu</span>
          <button onClick={() => setIsOpen(false)} className="text-gray-500 hover:text-gray-700">
            Close
          </button>
        </div>

        {/* Menu Items */}
        <div className="py-2 bg-white">
          {items.map((item, index) => (
            <Link
              key={index}
              href={item.href}
              onClick={() => handleItemClick(item.href)}
              className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors duration-150"
            >
              {item.label}
            </Link>
          ))}
        </div>
      </div>
    </div>
  );
};
</file>

<file path="src/components/HelloWorld.tsx">
import React, { useState, useEffect } from 'react';

interface HelloWorldData {
  message: string;
  timestamp: string;
}

export const HelloWorld: React.FC = () => {
  const [helloData, setHelloData] = useState<HelloWorldData | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const fetchHelloWorld = async () => {
      try {
        const response = await fetch('/api/hello');

        if (!response.ok) {
          throw new Error('Failed to fetch Hello World data');
        }

        const data: HelloWorldData = await response.json();
        setHelloData(data);
        setIsLoading(false);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'An unknown error occurred');
        setIsLoading(false);
      }
    };

    fetchHelloWorld();
  }, []);

  if (isLoading) {
    return <div>Loading...</div>;
  }

  if (error) {
    return <div>Error: {error}</div>;
  }

  return (
    <div className="p-4 bg-gray-100 rounded-lg shadow-md">
      <h2 className="text-2xl font-bold mb-4">Hello World Endpoint</h2>
      {helloData && (
        <div>
          <p className="text-lg mb-2">Message: {helloData.message}</p>
          <p className="text-sm text-gray-600">
            Timestamp: {new Date(helloData.timestamp).toLocaleString()}
          </p>
        </div>
      )}
    </div>
  );
};
</file>

<file path="src/contexts/ConversationContext.tsx">
import React, { createContext, useState, Dispatch, SetStateAction, ReactNode } from 'react';

// Message interface to define the structure of chat messages
export interface Message {
  id: string; // Unique identifier for each message
  role: 'user' | 'system' | 'assistant';
  content: string;
  timestamp: Date;
}

// Context type definition with all required state and methods
export interface ConversationContextType {
  systemPrompt: string;
  userPrompt: string;
  conversationHistory: Message[];

  // Setters for prompts
  setSystemPrompt: Dispatch<SetStateAction<string>>;
  setUserPrompt: Dispatch<SetStateAction<string>>;

  // Methods to manage conversation
  addMessageToHistory: (message: Message) => void;
  clearConversationHistory: () => void;
}

// Create the context with undefined initial value
const ConversationContext = createContext<ConversationContextType | undefined>(undefined);

// Provider component
export const ConversationProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [systemPrompt, setSystemPrompt] = useState<string>('');
  const [userPrompt, setUserPrompt] = useState<string>('');
  const [conversationHistory, setConversationHistory] = useState<Message[]>([]);

  // Method to add a message to conversation history
  const addMessageToHistory = (message: Message) => {
    setConversationHistory(prevHistory => [...prevHistory, message]);
  };

  // Method to clear conversation history
  const clearConversationHistory = () => {
    setConversationHistory([]);
  };

  // Context value to be provided
  const contextValue: ConversationContextType = {
    systemPrompt,
    userPrompt,
    conversationHistory,
    setSystemPrompt,
    setUserPrompt,
    addMessageToHistory,
    clearConversationHistory,
  };

  return (
    <ConversationContext.Provider value={contextValue}>{children}</ConversationContext.Provider>
  );
};

// Custom hook to use conversation context
export const useConversation = (): ConversationContextType => {
  const context = React.useContext(ConversationContext);

  if (context === undefined) {
    throw new Error('useConversation must be used within a ConversationProvider');
  }

  return context;
};
</file>

<file path="src/pages/api/hello.ts">
import type { NextApiRequest, NextApiResponse } from 'next';

type HelloWorldResponse = {
  message: string;
  timestamp: string;
};

export default function handler(req: NextApiRequest, res: NextApiResponse<HelloWorldResponse>) {
  // Check if the request method is GET
  if (req.method === 'GET') {
    // Return Hello World message with current timestamp
    res.status(200).json({
      message: 'Hello World',
      timestamp: new Date().toISOString(),
    });
  } else {
    // Handle any non-GET requests
    res.setHeader('Allow', ['GET']);
    res.status(405).end(`Method ${req.method} Not Allowed`);
  }
}
</file>

<file path="src/pages/_app.tsx">
import type { AppProps } from 'next/app';
import '../styles/global.css';
import { Layout } from '../components/layout/Layout';

function MyApp({ Component, pageProps }: AppProps) {
  return (
    <Layout>
      <Component {...pageProps} />
    </Layout>
  );
}

export default MyApp;
</file>

<file path="src/pages/chat.tsx">
import React from 'react';
import { ConversationProvider } from '@/contexts/ConversationContext';
import PromptInput from '@/components/chat/PromptInput';
import MessageDisplay from '@/components/chat/MessageDisplay';

const ChatPage: React.FC = () => {
  return (
    <ConversationProvider>
      <div className="flex flex-col h-screen max-w-4xl mx-auto p-4 space-y-4 bg-gray-50 transition-colors duration-300 ease-in-out">
        {/* Message Display Area */}
        <div className="flex-grow overflow-hidden rounded-lg shadow-sm hover:shadow-md transition-shadow duration-300">
          <MessageDisplay />
        </div>

        {/* Prompt Input Area */}
        <div className="sticky bottom-0 w-full z-10 animate-fade-in-up">
          <PromptInput />
        </div>
      </div>
    </ConversationProvider>
  );
};

export default ChatPage;
</file>

<file path="src/pages/hello.tsx">
import React from 'react';
import { HelloWorld } from '../components/HelloWorld';
import { Layout } from '../components/layout/Layout';

export default function HelloPage() {
  return (
    <Layout>
      <div className="container mx-auto px-4 py-8">
        <h1 className="text-3xl font-bold mb-6">Hello World Endpoint Demo</h1>
        <HelloWorld />
      </div>
    </Layout>
  );
}
</file>

<file path="src/styles/global.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer components {
  /* Button Styles */
  .btn {
    @apply inline-flex items-center justify-center px-6 py-2.5 rounded-full font-medium transition-colors duration-200;
  }
  .btn-primary {
    @apply btn bg-primary text-white hover:bg-primary-hover shadow-sm;
  }
  .btn-secondary {
    @apply btn bg-secondary text-white hover:bg-secondary-hover;
  }

  /* Dropdown Styles */
  .dropdown {
    @apply relative inline-block;
  }
  .dropdown-content {
    @apply absolute z-50 mt-2 w-56 rounded-dropdown bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none;
  }
  .dropdown-item {
    @apply block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900 cursor-pointer;
  }

  /* Input Styles */
  .input {
    @apply block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary sm:text-sm;
  }

  /* Card Styles */
  .card {
    @apply bg-white rounded-lg shadow-md p-6;
  }
}
</file>

<file path="src/styles/Home.module.css">
.container {
  min-height: 100vh;
  padding: 0 0.5rem;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.title a {
  color: #0070f3;
  text-decoration: none;
}

.title a:hover,
.title a:focus,
.title a:active {
  text-decoration: underline;
}

.title {
  margin: 0 0 1rem;
  line-height: 1.15;
  font-size: 3.6rem;
}

.title {
  text-align: center;
}

.title,
.description {
  text-align: center;
}

.description {
  line-height: 1.5;
  font-size: 1.5rem;
}

.grid {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-wrap: wrap;

  max-width: 800px;
  margin-top: 3rem;
}

.card {
  margin: 1rem;
  flex-basis: 45%;
  padding: 1.5rem;
  text-align: left;
  color: inherit;
  text-decoration: none;
  border: 1px solid #eaeaea;
  border-radius: 10px;
  transition:
    color 0.15s ease,
    border-color 0.15s ease;
}

.card:hover,
.card:focus,
.card:active {
  color: #0070f3;
  border-color: #0070f3;
}

.card h3 {
  margin: 0 0 1rem 0;
  font-size: 1.5rem;
}

.card p {
  margin: 0;
  font-size: 1.25rem;
  line-height: 1.5;
}

.logo {
  height: 1em;
}

@media (max-width: 600px) {
  .grid {
    width: 100%;
    flex-direction: column;
  }
}
</file>

<file path="src/test/__mocks__/openai.ts">
import { vi } from 'vitest';

const mockOpenAI = vi.fn().mockImplementation(() => ({
  chat: {
    completions: {
      create: vi.fn(),
    },
  },
}));

export default mockOpenAI;
</file>

<file path="src/test/mocks/openai.ts">
import { vi } from 'vitest';

export const mockCreate = vi.fn();

export const mockOpenAI = {
  chat: {
    completions: {
      create: mockCreate,
    },
  },
};
</file>

<file path="src/test/mocks/validateResponseSetup.ts">
import { vi, beforeEach, afterEach } from 'vitest';
import { mockCreate } from './openai';

// Mock OpenAI module
vi.mock('openai', () => {
  return {
    default: vi.fn().mockImplementation(() => ({
      chat: {
        completions: {
          create: mockCreate,
        },
      },
    })),
  };
});

// Mock process.env
const processEnv = process.env;
vi.spyOn(process, 'env', 'get').mockReturnValue({
  ...processEnv,
  OPENAI_API_KEY: 'test-key',
});

export const setupValidateResponseMocks = () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  afterEach(() => {
    vi.clearAllTimers();
  });
};
</file>

<file path="src/test/ChatPage.test.tsx">
import React from 'react';
import { render, screen } from '@testing-library/react';
import { describe, it, expect } from 'vitest';
import ChatPage from '../pages/chat';

// Mock the child components to isolate the page component
vi.mock('@/components/chat/MessageDisplay', () => ({
  default: () => <div data-testid="message-display">Mocked Message Display</div>,
}));

vi.mock('@/components/chat/PromptInput', () => ({
  default: () => <div data-testid="prompt-input">Mocked Prompt Input</div>,
}));

describe('ChatPage', () => {
  it('renders the page with ConversationProvider', () => {
    render(<ChatPage />);

    // Check if mocked components are rendered
    const messageDisplay = screen.getByTestId('message-display');
    const promptInput = screen.getByTestId('prompt-input');

    expect(messageDisplay).toBeInTheDocument();
    expect(promptInput).toBeInTheDocument();
  });

  it('has correct layout classes', () => {
    const { container } = render(<ChatPage />);
    const pageContainer = container.firstChild;

    expect(pageContainer).toHaveClass('flex flex-col h-screen max-w-4xl mx-auto p-4 space-y-4');
  });

  // it('has correct child container classes', () => {
  //   const { container } = render(<ChatPage />);
  //   const messageDisplayContainer = container.querySelector('div > div:first-child');
  //   const promptInputContainer = container.querySelector('div > div:last-child');

  //   expect(messageDisplayContainer).toHaveClass('flex-grow overflow-hidden');
  //   expect(promptInputContainer).toHaveClass('sticky bottom-0 w-full');
  // });
});
</file>

<file path="src/test/ConversationContext.test.tsx">
import { describe, it, expect } from 'vitest';
import { renderHook, act } from '@testing-library/react';
import { ConversationProvider, useConversation, Message } from '../contexts/ConversationContext';

describe('ConversationContext', () => {
  // Test adding a message
  it('should add a message to conversation history', () => {
    const { result } = renderHook(() => useConversation(), {
      wrapper: ConversationProvider,
    });

    const testMessage: Message = {
      id: '1',
      role: 'user',
      content: 'Hello',
      timestamp: new Date(),
    };

    act(() => {
      result.current.addMessageToHistory(testMessage);
    });

    expect(result.current.conversationHistory).toHaveLength(1);
    expect(result.current.conversationHistory[0]).toEqual(testMessage);
  });

  // Test clearing conversation history
  it('should clear conversation history', () => {
    const { result } = renderHook(() => useConversation(), {
      wrapper: ConversationProvider,
    });

    const testMessages: Message[] = [
      { id: '1', role: 'user', content: 'Hello', timestamp: new Date() },
      { id: '2', role: 'assistant', content: 'Hi there', timestamp: new Date() },
    ];

    act(() => {
      testMessages.forEach(msg => result.current.addMessageToHistory(msg));
      result.current.clearConversationHistory();
    });

    expect(result.current.conversationHistory).toHaveLength(0);
  });

  // Test setting system and user prompts
  it('should update system and user prompts', () => {
    const { result } = renderHook(() => useConversation(), {
      wrapper: ConversationProvider,
    });

    act(() => {
      result.current.setSystemPrompt('Test system prompt');
      result.current.setUserPrompt('Test user prompt');
    });

    expect(result.current.systemPrompt).toBe('Test system prompt');
    expect(result.current.userPrompt).toBe('Test user prompt');
  });

  // Test that hook throws error when used outside provider
  it('should throw an error when used outside ConversationProvider', () => {
    const hookCall = () => {
      renderHook(() => useConversation());
    };

    expect(hookCall).toThrow('useConversation must be used within a ConversationProvider');
  });
});
</file>

<file path="src/test/MessageDisplay.test.tsx">
import React from 'react';
import { render, screen } from '@testing-library/react';
import { describe, it, expect } from 'vitest';
import { ConversationProvider } from '@/contexts/ConversationContext';
import MessageDisplay from '@/components/chat/MessageDisplay';

describe('MessageDisplay Component', () => {
  it('renders empty state when no messages', () => {
    render(
      <ConversationProvider>
        <MessageDisplay />
      </ConversationProvider>
    );

    expect(screen.getByText('No messages yet. Start a conversation!')).toBeInTheDocument();
  });

  // it('renders messages with correct styling', () => {
  //   const MockMessageDisplayWithContext: React.FC = () => {
  //     const { addMessageToHistory } = useConversation();

  //     React.useEffect(() => {
  //       addMessageToHistory({
  //         id: '1',
  //         role: 'user',
  //         content: 'User message',
  //         timestamp: new Date(),
  //       });
  //       addMessageToHistory({
  //         id: '2',
  //         role: 'assistant',
  //         content: 'Assistant response',
  //         timestamp: new Date(),
  //       });
  //     }, [addMessageToHistory]);

  //     return <MessageDisplay />;
  //   };

  //   render(
  //     <ConversationProvider>
  //       <MockMessageDisplayWithContext />
  //     </ConversationProvider>
  //   );

  //   // Check that messages are rendered
  //   expect(screen.getByText('User message')).toBeInTheDocument();
  //   expect(screen.getByText('Assistant response')).toBeInTheDocument();
  // });

  // it('applies correct styling based on message role', () => {
  //   const MockMessageDisplayWithContext: React.FC = () => {
  //     const { addMessageToHistory } = useConversation();

  //     React.useEffect(() => {
  //       addMessageToHistory({
  //         id: '1',
  //         role: 'user',
  //         content: 'User message',
  //         timestamp: new Date(),
  //       });
  //       addMessageToHistory({
  //         id: '2',
  //         role: 'system',
  //         content: 'System message',
  //         timestamp: new Date(),
  //       });
  //       addMessageToHistory({
  //         id: '3',
  //         role: 'assistant',
  //         content: 'Assistant response',
  //         timestamp: new Date(),
  //       });
  //     }, [addMessageToHistory]);

  //     return <MessageDisplay />;
  //   };

  //   render(
  //     <ConversationProvider>
  //       <MockMessageDisplayWithContext />
  //     </ConversationProvider>
  //   );

  //   const userMessage = screen.getByText('User message');
  //   const systemMessage = screen.getByText('System message');
  //   const assistantMessage = screen.getByText('Assistant response');

  //   // Check for role-specific classes
  //   expect(userMessage.className).toContain('bg-blue-100');
  //   expect(systemMessage.className).toContain('bg-gray-100');
  //   expect(assistantMessage.className).toContain('bg-green-100');
  // });
});
</file>

<file path="src/test/PromptInput.test.tsx">
import React from 'react';
import { render, fireEvent, screen } from '@testing-library/react';
import { describe, it, expect } from 'vitest';
import { ConversationProvider } from '@/contexts/ConversationContext';
import PromptInput from '@/components/chat/PromptInput';

describe('PromptInput Component', () => {
  // Test rendering
  it('renders system and user prompt text areas', () => {
    render(
      <ConversationProvider>
        <PromptInput />
      </ConversationProvider>
    );

    expect(screen.getByPlaceholderText('Enter system prompt (optional)')).toBeInTheDocument();
    expect(screen.getByPlaceholderText('Enter your message')).toBeInTheDocument();
  });

  // Test sending message
  it('sends message and clears inputs', () => {
    const { getByPlaceholderText, getByText } = render(
      <ConversationProvider>
        <PromptInput />
      </ConversationProvider>
    );

    const systemPromptInput = getByPlaceholderText('Enter system prompt (optional)');
    const userPromptInput = getByPlaceholderText('Enter your message');
    const sendButton = getByText('Send');

    // Enter prompts
    fireEvent.change(systemPromptInput, { target: { value: 'Test system prompt' } });
    fireEvent.change(userPromptInput, { target: { value: 'Test user message' } });

    // Send message
    fireEvent.click(sendButton);

    // Check inputs are cleared
    expect(systemPromptInput).toHaveValue('');
    expect(userPromptInput).toHaveValue('');
  });

  // Test send button disabled
  // it('disables send button when user prompt is empty', () => {
  //   const { getByText } = render(
  //     <ConversationProvider>
  //       <PromptInput />
  //     </ConversationProvider>
  //   );

  //   const sendButton = getByText('Send');
  //   expect(sendButton).toBeDisabled();
  // });
});
</file>

<file path="src/test/setup.ts">
import { expect, afterEach } from 'vitest';
import { cleanup } from '@testing-library/react';
import * as matchers from '@testing-library/jest-dom/matchers';

// Extend vitest's expect with testing-library matchers
// eslint-disable-next-line @typescript-eslint/no-explicit-any
expect.extend(matchers as any);

// Automatically clean up after each test
afterEach(() => {
  cleanup();
});
</file>

<file path="src/test/vitest.d.ts">
import type { MockedFunction } from 'vitest';

type AnyFunction = (...args: unknown[]) => unknown;

declare global {
  const vi: {
    fn: <T extends AnyFunction>(implementation?: T) => MockedFunction<T>;
    mock: (moduleName: string, factory: () => unknown) => void;
    spyOn: <T, K extends keyof T>(
      object: T,
      method: K
    ) => MockedFunction<T[K] extends AnyFunction ? T[K] : never>;
    clearAllMocks: () => void;
  };
}

export {};
</file>

<file path="src/ui-kit/__mocks__/gsap.ts">
import { vi } from 'vitest';

// eslint-disable-next-line import/no-anonymous-default-export
export default {
  to: vi.fn(),
};
</file>

<file path="src/ui-kit/icons/IconAdd.test.tsx">
import React from 'react';
import { describe, it, expect } from 'vitest';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
import { IconAdd } from './IconAdd';

describe('IconAdd Component', () => {
  it('renders with default props', () => {
    render(<IconAdd data-testid="icon" />);
    const icon = screen.getByTestId('icon');
    expect(icon).toBeInTheDocument();
    expect(icon.tagName.toLowerCase()).toBe('svg');
    expect(icon).toHaveAttribute('width', '24');
    expect(icon).toHaveAttribute('height', '24');
    expect(icon.querySelector('path')).toHaveAttribute('fill', 'currentColor');
  });

  it('renders with custom size', () => {
    const customSize = 32;
    render(<IconAdd data-testid="icon" size={customSize} />);
    const icon = screen.getByTestId('icon');
    expect(icon).toHaveAttribute('width', customSize.toString());
    expect(icon).toHaveAttribute('height', customSize.toString());
  });

  it('renders with custom color', () => {
    const customColor = '#FF0000';
    render(<IconAdd data-testid="icon" color={customColor} />);
    const icon = screen.getByTestId('icon');
    expect(icon.querySelector('path')).toHaveAttribute('fill', customColor);
  });

  it('spreads additional SVG props', () => {
    render(<IconAdd data-testid="icon" className="custom-class" aria-label="Add icon" />);
    const icon = screen.getByTestId('icon');
    expect(icon).toHaveAttribute('class', 'custom-class');
    expect(icon).toHaveAttribute('aria-label', 'Add icon');
  });
});
</file>

<file path="src/ui-kit/icons/IconAdd.tsx">
import React from 'react';
import { IconProps } from './types';

export const IconAdd: React.FC<IconProps> = ({
  size = 24,
  color = 'currentColor',
  ...nativeProps
}) => {
  return (
    <svg
      width={size}
      height={size}
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...nativeProps}
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M13.1397 6.11362C13.1036 5.47798 13.031 4.84497 12.9222 4.21771C12.8776 4.0349 12.7796 3.86953 12.6407 3.7426C12.5018 3.61568 12.3283 3.53293 12.1423 3.50488C12.0232 3.48441 11.9013 3.48775 11.7835 3.51473C11.6657 3.5417 11.5544 3.59176 11.4561 3.66201C11.3578 3.73227 11.2743 3.82132 11.2106 3.92401C11.1469 4.0267 11.1042 4.141 11.0849 4.26028C10.9764 4.89078 10.9006 5.52645 10.8578 6.16474C10.8267 6.55668 10.821 6.94861 10.8153 7.3386C10.8117 7.58304 10.8082 7.82671 10.7984 8.06914C10.8206 8.68435 10.8427 9.31633 10.8649 9.9651C10.8871 10.2994 10.9183 10.6329 10.9586 10.9653C10.6283 10.9298 10.2956 10.9037 9.96287 10.8777L9.96285 10.8777C9.32425 10.8277 8.68563 10.8114 8.04699 10.8118C7.4243 10.8122 6.80958 10.8366 6.17948 10.8616L6.13106 10.8635C5.49104 10.8991 4.85387 10.9753 4.22341 11.0917C4.01476 11.1352 3.82737 11.2493 3.69279 11.4146C3.55821 11.58 3.48465 11.7867 3.48451 11.9997C3.48436 12.2128 3.55763 12.4193 3.69199 12.5845C3.82634 12.7497 4.01358 12.8635 4.22217 12.9068C4.85359 13.0148 5.49022 13.0901 6.12951 13.1323C6.26794 13.1395 6.40598 13.1479 6.54379 13.1563C7.04173 13.1865 7.53675 13.2165 8.03697 13.1899C8.29981 13.1758 8.56408 13.1718 8.82801 13.1677C9.20536 13.162 9.58204 13.1562 9.95291 13.1213C10.037 13.1134 10.1212 13.1057 10.2055 13.0979C10.4516 13.0752 10.6986 13.0525 10.9456 13.0257C10.8991 13.3711 10.8638 13.718 10.8398 14.0659C10.8337 14.2191 10.8261 14.3737 10.8186 14.5292L10.8186 14.5293C10.795 15.0118 10.7711 15.5016 10.7903 15.9772C10.7988 16.1875 10.8036 16.3997 10.8083 16.6125L10.8083 16.6126C10.8178 17.0359 10.8274 17.4617 10.8666 17.8801C10.9032 18.5152 10.9762 19.1478 11.0854 19.7747C11.1261 19.9581 11.2203 20.1254 11.3562 20.2553C11.4921 20.3853 11.6634 20.4719 11.8486 20.5043C11.9675 20.5249 12.0894 20.5216 12.207 20.4948C12.3247 20.4679 12.4359 20.418 12.5341 20.3478C12.6323 20.2777 12.7156 20.1888 12.7791 20.0862C12.8427 19.9837 12.8853 19.8695 12.9044 19.7503C13.0124 19.1204 13.0876 18.4853 13.1299 17.8475C13.1607 17.456 13.1661 17.0644 13.1715 16.6747L13.1715 16.6746C13.1748 16.4304 13.1782 16.1869 13.1878 15.9447C13.1875 15.3076 13.1704 14.6705 13.1366 14.0334C13.1141 13.6982 13.0825 13.3638 13.0418 13.0304C13.3706 13.0659 13.7019 13.0921 14.0331 13.1182C14.6722 13.1687 15.3112 13.1855 15.9503 13.1855C16.5735 13.1855 17.1886 13.1616 17.8191 13.137L17.8191 13.137L17.8676 13.1351C18.508 13.1 19.1456 13.0242 19.7764 12.9081C19.9852 12.8647 20.1726 12.7507 20.3072 12.5853C20.4418 12.4199 20.5152 12.2132 20.5152 12C20.5152 11.7867 20.4417 11.58 20.3072 11.4146C20.1726 11.2492 19.9851 11.1352 19.7764 11.0918C19.1444 10.9832 18.5073 10.9074 17.8675 10.8647C17.6835 10.855 17.5023 10.8383 17.3217 10.8217C16.8749 10.7807 16.4317 10.7399 15.9587 10.8058C15.5876 10.8574 15.2297 10.8593 14.876 10.861C14.5966 10.8625 14.3198 10.8639 14.0414 10.8898C13.9573 10.8977 13.8731 10.9054 13.7887 10.9131C13.5448 10.9354 13.3 10.9577 13.0552 10.984C13.1028 10.6343 13.139 10.283 13.1636 9.93076C13.1698 9.77745 13.1774 9.62264 13.1851 9.46707L13.1851 9.46705L13.1851 9.46702C13.2091 8.98412 13.2334 8.49384 13.2146 8.01798C13.2062 7.80748 13.2016 7.59511 13.197 7.38212C13.1878 6.95845 13.1786 6.53232 13.1397 6.11362Z"
        fill={color}
      />
    </svg>
  );
};
</file>

<file path="src/ui-kit/icons/IconArrowDown.test.tsx">
import React from 'react';
import { describe, it, expect } from 'vitest';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
import { IconArrowDown } from './IconArrowDown';

describe('IconArrowDown Component', () => {
  it('renders with default props', () => {
    render(<IconArrowDown data-testid="icon" />);
    const icon = screen.getByTestId('icon');
    expect(icon).toBeInTheDocument();
    expect(icon.tagName.toLowerCase()).toBe('svg');
    expect(icon).toHaveAttribute('width', '16');
    expect(icon).toHaveAttribute('height', '16');
    expect(icon).toHaveClass('rotate-180');
    expect(icon.querySelector('path')).toHaveAttribute('fill', 'currentColor');
  });

  it('renders with custom size', () => {
    const customSize = 32;
    render(<IconArrowDown data-testid="icon" size={customSize} />);
    const icon = screen.getByTestId('icon');
    expect(icon).toHaveAttribute('width', customSize.toString());
    expect(icon).toHaveAttribute('height', customSize.toString());
  });

  it('renders with custom color', () => {
    const customColor = '#FF0000';
    render(<IconArrowDown data-testid="icon" color={customColor} />);
    const icon = screen.getByTestId('icon');
    expect(icon.querySelector('path')).toHaveAttribute('fill', customColor);
  });

  it('spreads additional SVG props while maintaining default class', () => {
    render(
      <IconArrowDown data-testid="icon" className="custom-class" aria-label="Arrow down icon" />
    );
    const icon = screen.getByTestId('icon');
    expect(icon).toHaveClass('rotate-180', 'custom-class');
    expect(icon).toHaveAttribute('aria-label', 'Arrow down icon');
  });
});
</file>

<file path="src/ui-kit/icons/IconArrowDown.tsx">
import React from 'react';
import { IconProps } from './types';

export const IconArrowDown: React.FC<IconProps> = ({
  size = 16,
  color = 'currentColor',
  ...nativeProps
}) => (
  <svg
    width={size}
    height={size}
    viewBox="0 0 24 24"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    {...nativeProps}
    className={`rotate-180 ${nativeProps.className || ''}`}
  >
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M9.54105 5.09686C10.1015 4.59372 10.6887 4.12134 11.3003 3.6818C11.4453 3.58807 11.6116 3.5347 11.7824 3.52583C11.8001 3.52168 11.818 3.51801 11.836 3.51485C11.9641 3.49231 12.0954 3.49546 12.2223 3.52411C12.3492 3.55276 12.4691 3.60633 12.5751 3.68173C13.1998 4.06418 13.7352 4.52312 14.2961 5.03305L14.2961 5.03306C14.857 5.54299 15.418 6.05292 15.9406 6.58834C16.0283 6.67816 16.1164 6.76798 16.2045 6.85793L16.2045 6.85793C16.6419 7.30413 17.0822 7.7533 17.4959 8.22012C17.9931 8.78104 18.4903 9.34197 18.9492 9.95389C19.0455 10.136 19.0828 10.3435 19.056 10.5478C19.0292 10.752 18.9396 10.9429 18.7997 11.094C18.6597 11.2452 18.4763 11.3491 18.2747 11.3915C18.0731 11.4339 17.8634 11.4127 17.6744 11.3307C17.0115 10.8973 16.3741 10.4256 15.8004 9.92839C15.2267 9.43121 14.6786 8.90853 14.1431 8.38585C13.8113 8.06194 13.4844 7.72825 13.1624 7.39083C13.1931 7.80637 13.2126 8.22127 13.2126 8.64067C13.2126 9.04908 13.2211 9.45608 13.2296 9.86261C13.2466 10.6742 13.2635 11.484 13.2126 12.2994C13.1701 12.9794 13.1669 13.6554 13.1638 14.3318C13.1613 14.8729 13.1588 15.4143 13.1361 15.9582C13.0851 17.182 13.0341 18.3421 12.9194 19.6169C12.8964 19.8446 12.7947 20.0571 12.6318 20.2177C12.4688 20.3783 12.2549 20.4769 12.027 20.4966C11.7691 20.5181 11.513 20.4383 11.3131 20.274C11.1131 20.1098 10.9851 19.8741 10.9561 19.6169C10.8833 18.8396 10.8464 18.057 10.8096 17.2759C10.7884 16.8273 10.7673 16.3791 10.7394 15.9327C10.6629 14.7088 10.5992 13.4978 10.6629 12.2739C10.6967 11.6261 10.6983 10.9783 10.6998 10.3324C10.7013 9.75802 10.7027 9.18518 10.7267 8.61517C10.7461 8.15296 10.7656 7.69633 10.7893 7.23746C10.4253 7.62919 10.0501 8.00432 9.66854 8.38592C9.13311 8.92135 8.58493 9.43128 8.02401 9.92846C7.4424 10.4288 6.83382 10.897 6.201 11.3308C6.03722 11.4352 5.84704 11.4906 5.65282 11.4906C5.45861 11.4906 5.26843 11.4352 5.10465 11.3308C4.90724 11.1787 4.77411 10.9581 4.73161 10.7126C4.68912 10.467 4.74035 10.2145 4.87518 10.005C5.32137 9.39303 5.8058 8.80661 6.31574 8.25844C6.37767 8.19186 6.43961 8.12509 6.50161 8.05825C6.9501 7.57476 7.40218 7.0874 7.88377 6.6394C8.06747 6.46852 8.24973 6.29478 8.43248 6.12058C8.79509 5.77492 9.15962 5.42744 9.54105 5.09686Z"
      fill={color}
    />
  </svg>
);
</file>

<file path="src/ui-kit/icons/IconArrowDownUp.test.tsx">
import React from 'react';
import { describe, it, expect } from 'vitest';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
import { IconArrowDownUp } from './IconArrowDownUp';

describe('IconArrowDownUp Component', () => {
  it('renders with default props', () => {
    render(<IconArrowDownUp data-testid="icon" />);
    const icon = screen.getByTestId('icon');
    expect(icon).toBeInTheDocument();
    expect(icon.tagName.toLowerCase()).toBe('svg');
    expect(icon).toHaveAttribute('width', '16');
    expect(icon).toHaveAttribute('height', '16');
    expect(icon).toHaveAttribute('viewBox', '0 0 16 16');
    const path = icon.querySelector('path');
    expect(path).toHaveAttribute('stroke', 'currentColor');
    expect(path).toHaveAttribute('stroke-width', '1.5');
    expect(path).toHaveAttribute('stroke-linecap', 'round');
    expect(path).toHaveAttribute('stroke-linejoin', 'round');
  });

  it('renders with custom size', () => {
    const customSize = 32;
    render(<IconArrowDownUp data-testid="icon" size={customSize} />);
    const icon = screen.getByTestId('icon');
    expect(icon).toHaveAttribute('width', customSize.toString());
    expect(icon).toHaveAttribute('height', customSize.toString());
  });

  it('renders with custom color', () => {
    const customColor = '#FF0000';
    render(<IconArrowDownUp data-testid="icon" color={customColor} />);
    const icon = screen.getByTestId('icon');
    expect(icon.querySelector('path')).toHaveAttribute('stroke', customColor);
  });

  it('spreads additional SVG props', () => {
    render(
      <IconArrowDownUp data-testid="icon" className="custom-class" aria-label="Arrow up and down" />
    );
    const icon = screen.getByTestId('icon');
    expect(icon).toHaveClass('custom-class');
    expect(icon).toHaveAttribute('aria-label', 'Arrow up and down');
  });
});
</file>

<file path="src/ui-kit/icons/IconArrowDownUp.tsx">
import React from 'react';
import { IconProps } from './types';

export const IconArrowDownUp: React.FC<IconProps> = ({
  size = 16,
  color = 'currentColor',
  ...nativeProps
}) => (
  <svg
    width={size}
    height={size}
    viewBox="0 0 16 16"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    {...nativeProps}
  >
    <path
      d="M8.0003 6.78065L8.0003 0.847656M8.0003 0.847656L5.17188 3.67608M8.0003 0.847656L10.8287 3.67608M8.0003 9.21855L8.0003 15.1516M8.0003 15.1516L10.8287 12.3231M8.0003 15.1516L5.17188 12.3231"
      stroke={color}
      strokeWidth="1.5"
      strokeLinecap="round"
      strokeLinejoin="round"
    />
  </svg>
);
</file>

<file path="src/ui-kit/icons/IconArrowLeft.test.tsx">
import React from 'react';
import { describe, it, expect } from 'vitest';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
import { IconArrowLeft } from './IconArrowLeft';

describe('IconArrowLeft Component', () => {
  it('renders with default props', () => {
    render(<IconArrowLeft data-testid="icon" />);
    const icon = screen.getByTestId('icon');
    expect(icon).toBeInTheDocument();
    expect(icon.tagName.toLowerCase()).toBe('svg');
    expect(icon).toHaveAttribute('width', '16');
    expect(icon).toHaveAttribute('height', '16');
    expect(icon).toHaveAttribute('viewBox', '0 0 16 12');
    expect(icon).toHaveClass('stroke-current');
    const path = icon.querySelector('path');
    expect(path).toHaveAttribute('stroke', 'currentColor');
    expect(path).toHaveAttribute('stroke-width', '2');
    expect(path).toHaveAttribute('stroke-linecap', 'round');
    expect(path).toHaveAttribute('stroke-linejoin', 'round');
  });

  it('renders with custom size', () => {
    const customSize = 32;
    render(<IconArrowLeft data-testid="icon" size={customSize} />);
    const icon = screen.getByTestId('icon');
    expect(icon).toHaveAttribute('width', customSize.toString());
    expect(icon).toHaveAttribute('height', customSize.toString());
  });

  it('renders with custom color', () => {
    const customColor = '#FF0000';
    render(<IconArrowLeft data-testid="icon" color={customColor} />);
    const icon = screen.getByTestId('icon');
    expect(icon.querySelector('path')).toHaveAttribute('stroke', customColor);
  });

  it('merges className with default class', () => {
    render(<IconArrowLeft data-testid="icon" className="custom-class" />);
    const icon = screen.getByTestId('icon');
    expect(icon).toHaveClass('stroke-current', 'custom-class');
  });

  it('spreads additional SVG props', () => {
    render(<IconArrowLeft data-testid="icon" aria-label="Left arrow" />);
    const icon = screen.getByTestId('icon');
    expect(icon).toHaveAttribute('aria-label', 'Left arrow');
  });
});
</file>

<file path="src/ui-kit/icons/IconArrowLeft.tsx">
import React from 'react';
import { IconProps } from './types';
import { cn } from '../utils/cn';

export const IconArrowLeft: React.FC<IconProps> = ({
  size = 16,
  color = 'currentColor',
  className,
  ...nativeProps
}) => (
  <svg
    width={size}
    height={size}
    viewBox="0 0 16 12"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    className={cn('stroke-current', className)}
    {...nativeProps}
  >
    <path
      d="M14.6667 6H1.33337M1.33337 6L6.33337 11M1.33337 6L6.33337 1"
      stroke={color}
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    />
  </svg>
);
</file>

<file path="src/ui-kit/icons/IconButton.test.tsx">
import React from 'react';
import { describe, it, expect } from 'vitest';
import { render, screen } from '@testing-library/react';
import { IconButton } from './IconButton';

describe('IconButton Component', () => {
  it('renders with default props', () => {
    render(<IconButton data-testid="icon-button" />);
    const svg = screen.getByTestId('icon-button');

    expect(svg).toBeInTheDocument();
    expect(svg).toHaveAttribute('width', '24');
    expect(svg).toHaveAttribute('height', '24');
    expect(svg).toHaveAttribute('viewBox', '0 0 24 24');
    expect(svg).toHaveAttribute('fill', 'none');
  });

  it('renders with custom size and color', () => {
    render(<IconButton size={32} color="#FF0000" data-testid="icon-button" />);
    const svg = screen.getByTestId('icon-button');

    expect(svg).toHaveAttribute('width', '32');
    expect(svg).toHaveAttribute('height', '32');

    const strokes = svg.querySelectorAll('[stroke="#FF0000"]');
    const fills = svg.querySelectorAll('[fill="#FF0000"]');
    expect(strokes.length).toBeGreaterThan(0);
    expect(fills.length).toBeGreaterThan(0);
  });

  it('passes additional SVG props', () => {
    render(
      <IconButton data-testid="icon-button" className="custom-icon" aria-label="Button Icon" />
    );
    const svg = screen.getByTestId('icon-button');

    expect(svg).toHaveAttribute('data-testid', 'icon-button');
    expect(svg).toHaveClass('custom-icon');
    expect(svg).toHaveAttribute('aria-label', 'Button Icon');
  });

  it('has correct SVG structure', () => {
    render(<IconButton data-testid="icon-button" />);
    const svg = screen.getByTestId('icon-button');

    const rects = svg.querySelectorAll('rect');
    expect(rects.length).toBe(3);

    // Check the main background rect
    const backgroundRect = rects[0];
    expect(backgroundRect).toHaveAttribute('x', '2');
    expect(backgroundRect).toHaveAttribute('y', '8');
    expect(backgroundRect).toHaveAttribute('width', '20');
    expect(backgroundRect).toHaveAttribute('height', '8');
    expect(backgroundRect).toHaveAttribute('rx', '4');
  });
});
</file>

<file path="src/ui-kit/icons/IconButton.tsx">
import React from 'react';
import { IconProps } from './types';

export const IconButton: React.FC<IconProps> = ({
  size = 24,
  color = 'currentColor',
  ...nativeProps
}) => {
  return (
    <svg
      width={size}
      height={size}
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...nativeProps}
    >
      <rect x="2" y="8" width="20" height="8" rx="4" stroke={color} strokeWidth="2" />
      <rect x="10" y="11" width="9" height="2" rx="1" fill={color} />
      <rect x="5" y="11" width="3" height="2" rx="1" fill={color} />
    </svg>
  );
};
</file>

<file path="src/ui-kit/icons/IconCheck.test.tsx">
import React from 'react';
import { describe, it, expect } from 'vitest';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
import { IconCheck } from './IconCheck';

describe('IconCheck Component', () => {
  it('renders with default props', () => {
    render(<IconCheck data-testid="check-icon" />);
    const svg = screen.getByTestId('check-icon');
    const path = svg.querySelector('path');

    expect(svg).toBeInTheDocument();
    expect(svg).toHaveAttribute('width', '24');
    expect(svg).toHaveAttribute('height', '24');
    expect(svg).toHaveAttribute('viewBox', '0 0 20 20');
    expect(path).toHaveAttribute('stroke', 'currentColor');
  });

  it('renders with custom size', () => {
    render(<IconCheck size={32} data-testid="check-icon" />);
    const svg = screen.getByTestId('check-icon');

    expect(svg).toHaveAttribute('width', '32');
    expect(svg).toHaveAttribute('height', '32');
  });

  it('renders with custom color', () => {
    render(<IconCheck color="red" data-testid="check-icon" />);
    const path = screen.getByTestId('check-icon').querySelector('path');

    expect(path).toHaveAttribute('stroke', 'red');
  });

  it('applies custom className', () => {
    render(<IconCheck data-testid="check-icon" className="custom-class" />);
    const svg = screen.getByTestId('check-icon');

    expect(svg).toHaveClass('custom-class');
  });

  it('passes through additional native props', () => {
    render(<IconCheck data-testid="check-icon" className="custom-class" aria-label="Check" />);
    const svg = screen.getByTestId('check-icon');

    expect(svg).toHaveClass('custom-class');
    expect(svg).toHaveAttribute('aria-label', 'Check');
  });
});
</file>

<file path="src/ui-kit/icons/IconCheck.tsx">
import React from 'react';
import { IconProps } from './types';

export const IconCheck: React.FC<IconProps> = ({
  size = 24,
  color = 'currentColor',
  className = '',
  ...nativeProps
}) => {
  return (
    <svg
      width={size}
      height={size}
      className={className}
      viewBox="0 0 20 20"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...nativeProps}
    >
      <path
        d="M16.6666 5L7.49992 14.1667L3.33325 10"
        stroke={color}
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
};
</file>

<file path="src/ui-kit/icons/IconCopy.test.tsx">
import React from 'react';
import { describe, it, expect } from 'vitest';
import { render, screen } from '@testing-library/react';
import { IconCopy } from './IconCopy';

describe('IconCopy Component', () => {
  it('renders with default props', () => {
    render(<IconCopy data-testid="icon-copy" />);
    const svg = screen.getByTestId('icon-copy');

    expect(svg).toBeInTheDocument();
    expect(svg).toHaveAttribute('width', '24');
    expect(svg).toHaveAttribute('height', '24');
    expect(svg).toHaveAttribute('viewBox', '0 0 20 21');
    expect(svg).toHaveAttribute('fill', 'none');
  });

  it('renders with custom size and color', () => {
    render(<IconCopy size={32} color="#FF0000" data-testid="icon-copy" />);
    const svg = screen.getByTestId('icon-copy');

    expect(svg).toHaveAttribute('width', '32');
    expect(svg).toHaveAttribute('height', '32');

    const strokes = svg.querySelectorAll('[stroke="#FF0000"]');
    expect(strokes.length).toBeGreaterThan(0);
  });

  it('passes additional SVG props', () => {
    render(<IconCopy data-testid="icon-copy" className="custom-icon" aria-label="Copy Icon" />);
    const svg = screen.getByTestId('icon-copy');

    expect(svg).toHaveAttribute('data-testid', 'icon-copy');
    expect(svg).toHaveClass('custom-icon');
    expect(svg).toHaveAttribute('aria-label', 'Copy Icon');
  });

  it('has correct SVG structure', () => {
    render(<IconCopy data-testid="icon-copy" />);
    const svg = screen.getByTestId('icon-copy');

    const paths = svg.querySelectorAll('path');
    expect(paths.length).toBe(1);

    const path = paths[0];
    expect(path.getAttribute('stroke')).toBe('currentColor');
    expect(path.getAttribute('stroke-width')).toBe('2');
    expect(path.getAttribute('stroke-linecap')).toBe('round');
    expect(path.getAttribute('stroke-linejoin')).toBe('round');
  });
});
</file>

<file path="src/ui-kit/icons/IconCopy.tsx">
import React from 'react';
import { IconProps } from './types';

export const IconCopy: React.FC<IconProps> = ({
  size = 24,
  color = 'currentColor',
  ...nativeProps
}) => {
  return (
    <svg
      width={size}
      height={size}
      viewBox="0 0 20 21"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...nativeProps}
    >
      <path
        d="M6.66666 7.16675V4.83341C6.66666 3.89999 6.66666 3.43328 6.84831 3.07676C7.0081 2.76316 7.26307 2.50819 7.57667 2.3484C7.93319 2.16675 8.3999 2.16675 9.33332 2.16675H15.6667C16.6001 2.16675 17.0668 2.16675 17.4233 2.3484C17.7369 2.50819 17.9919 2.76316 18.1517 3.07676C18.3333 3.43328 18.3333 3.89999 18.3333 4.83341V11.1667C18.3333 12.1002 18.3333 12.5669 18.1517 12.9234C17.9919 13.237 17.7369 13.492 17.4233 13.6518C17.0668 13.8334 16.6001 13.8334 15.6667 13.8334H13.3333M4.33332 18.8334H10.6667C11.6001 18.8334 12.0668 18.8334 12.4233 18.6518C12.7369 18.492 12.9919 18.237 13.1517 17.9234C13.3333 17.5669 13.3333 17.1002 13.3333 16.1667V9.83341C13.3333 8.89999 13.3333 8.43328 13.1517 8.07676C12.9919 7.76316 12.7369 7.50819 12.4233 7.3484C12.0668 7.16675 11.6001 7.16675 10.6667 7.16675H4.33332C3.3999 7.16675 2.93319 7.16675 2.57667 7.3484C2.26307 7.50819 2.0081 7.76316 1.84831 8.07676C1.66666 8.43328 1.66666 8.89999 1.66666 9.83341V16.1667C1.66666 17.1002 1.66666 17.5669 1.84831 17.9234C2.0081 18.237 2.26307 18.492 2.57667 18.6518C2.93319 18.8334 3.3999 18.8334 4.33332 18.8334Z"
        stroke={color}
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
};
</file>

<file path="src/ui-kit/icons/IconCreate.test.tsx">
import React from 'react';
import { describe, it, expect } from 'vitest';
import { render, screen } from '@testing-library/react';
import { IconCreate } from './IconCreate';

describe('IconCreate Component', () => {
  it('renders with default props', () => {
    render(<IconCreate data-testid="icon-create" />);
    const svg = screen.getByTestId('icon-create');

    expect(svg).toBeInTheDocument();
    expect(svg).toHaveAttribute('width', '24');
    expect(svg).toHaveAttribute('height', '24');
    expect(svg).toHaveAttribute('viewBox', '0 0 24 24');
    expect(svg).toHaveAttribute('fill', 'none');
  });

  it('renders with custom size and color', () => {
    render(<IconCreate size={32} color="#FF0000" data-testid="icon-create" />);
    const svg = screen.getByTestId('icon-create');

    expect(svg).toHaveAttribute('width', '32');
    expect(svg).toHaveAttribute('height', '32');

    const strokes = svg.querySelectorAll('[stroke="#FF0000"]');
    expect(strokes.length).toBeGreaterThan(0);
  });

  it('passes additional SVG props', () => {
    render(
      <IconCreate data-testid="icon-create" className="custom-icon" aria-label="Create Icon" />
    );
    const svg = screen.getByTestId('icon-create');

    expect(svg).toHaveAttribute('data-testid', 'icon-create');
    expect(svg).toHaveClass('custom-icon');
    expect(svg).toHaveAttribute('aria-label', 'Create Icon');
  });

  it('has correct SVG structure', () => {
    render(<IconCreate data-testid="icon-create" />);
    const svg = screen.getByTestId('icon-create');

    const paths = svg.querySelectorAll('path');
    expect(paths.length).toBe(1);

    const path = paths[0];
    expect(path.getAttribute('stroke')).toBe('currentColor');
    expect(path.getAttribute('stroke-width')).toBe('2');
    expect(path.getAttribute('stroke-linecap')).toBe('round');
    expect(path.getAttribute('stroke-linejoin')).toBe('round');
  });
});
</file>

<file path="src/ui-kit/icons/IconCreate.tsx">
import React from 'react';
import { IconProps } from './types';

export const IconCreate: React.FC<IconProps> = ({
  size = 24,
  color = 'currentColor',
  ...nativeProps
}) => {
  return (
    <svg
      width={size}
      height={size}
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...nativeProps}
    >
      <path
        stroke={color}
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        d="M4.5 22v-5m0-10V2M2 4.5h5m-5 15h5M13 3l-1.734 4.509c-.282.733-.423 1.1-.643 1.408a3 3 0 0 1-.706.707c-.308.219-.675.36-1.408.642L4 12l4.509 1.734c.733.282 1.1.423 1.408.643.273.194.512.433.707.706.219.308.36.675.642 1.408L13 21l1.734-4.509c.282-.733.423-1.1.643-1.408.194-.273.433-.512.706-.707.308-.219.675-.36 1.408-.642L22 12l-4.509-1.734c-.733-.282-1.1-.423-1.408-.642a3 3 0 0 1-.706-.707c-.22-.308-.36-.675-.643-1.408L13 3Z"
      />
    </svg>
  );
};
</file>

<file path="src/ui-kit/icons/IconDelete.test.tsx">
import React from 'react';
import { describe, it, expect } from 'vitest';
import { render } from '@testing-library/react';
import { IconDelete } from './IconDelete';

describe('IconDelete Component', () => {
  it('renders with default props', () => {
    const { getByTestId } = render(<IconDelete data-testid="delete-icon" />);
    const svg = getByTestId('delete-icon');

    expect(svg).toBeInTheDocument();
    expect(svg).toHaveAttribute('width', '24');
    expect(svg).toHaveAttribute('height', '24');
    expect(svg).toHaveAttribute('viewBox', '0 0 24 24');
  });

  it('renders with custom size', () => {
    const { getByTestId } = render(<IconDelete size={32} data-testid="delete-icon" />);
    const svg = getByTestId('delete-icon');

    expect(svg).toHaveAttribute('width', '32');
    expect(svg).toHaveAttribute('height', '32');
  });

  it('renders with custom color', () => {
    const { container } = render(<IconDelete color="red" data-testid="delete-icon" />);
    const path = container.querySelector('path');

    expect(path).toHaveAttribute('stroke', 'red');
  });

  it('passes through additional native props', () => {
    const { getByTestId } = render(
      <IconDelete data-testid="delete-icon" className="custom-class" aria-label="Delete" />
    );
    const svg = getByTestId('delete-icon');

    expect(svg).toHaveClass('custom-class');
    expect(svg).toHaveAttribute('aria-label', 'Delete');
  });
});
</file>

<file path="src/ui-kit/icons/IconDelete.tsx">
import React from 'react';
import { IconProps } from './types';

export const IconDelete: React.FC<IconProps> = ({
  size = 24,
  color = 'currentColor',
  ...nativeProps
}) => {
  return (
    <svg
      width={size}
      height={size}
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...nativeProps}
    >
      <path
        stroke={color}
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        d="M16 6v-.8c0-1.12 0-1.68-.218-2.108a2 2 0 0 0-.874-.874C14.48 2 13.92 2 12.8 2h-1.6c-1.12 0-1.68 0-2.108.218a2 2 0 0 0-.874.874C8 3.52 8 4.08 8 5.2V6m2 5.5v5m4-5v5M3 6h18m-2 0v11.2c0 1.68 0 2.52-.327 3.162a3 3 0 0 1-1.311 1.311C16.72 22 15.88 22 14.2 22H9.8c-1.68 0-2.52 0-3.162-.327a3 3 0 0 1-1.311-1.311C5 19.72 5 18.88 5 17.2V6"
      />
    </svg>
  );
};
</file>

<file path="src/ui-kit/icons/IconDownload.test.tsx">
import React from 'react';
import { describe, it, expect } from 'vitest';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
import { IconDownload } from './IconDownload';

describe('IconDownload Component', () => {
  it('renders with default props', () => {
    render(<IconDownload data-testid="download-icon" />);
    const svg = screen.getByTestId('download-icon');

    expect(svg).toBeInTheDocument();
    expect(svg).toHaveAttribute('width', '24');
    expect(svg).toHaveAttribute('height', '24');
    expect(svg).toHaveAttribute('viewBox', '0 0 24 24');
  });

  it('renders with custom size', () => {
    render(<IconDownload size={32} data-testid="download-icon" />);
    const svg = screen.getByTestId('download-icon');

    expect(svg).toHaveAttribute('width', '32');
    expect(svg).toHaveAttribute('height', '32');
  });

  it('renders with custom color', () => {
    render(<IconDownload color="red" data-testid="download-icon" />);
    const path = screen.getByTestId('download-icon').querySelector('path');

    expect(path).toHaveAttribute('stroke', 'red');
  });

  it('passes through additional native props', () => {
    render(
      <IconDownload data-testid="download-icon" className="custom-class" aria-label="Download" />
    );
    const svg = screen.getByTestId('download-icon');

    expect(svg).toHaveClass('custom-class');
    expect(svg).toHaveAttribute('aria-label', 'Download');
  });
});
</file>

<file path="src/ui-kit/icons/IconDownload.tsx">
import React from 'react';
import { IconProps } from './types';

export const IconDownload: React.FC<IconProps> = ({
  size = 24,
  color = 'currentColor',
  ...nativeProps
}) => {
  return (
    <svg
      width={size}
      height={size}
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...nativeProps}
    >
      <path
        stroke={color}
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        d="M21 15v1.2c0 1.68 0 2.52-.327 3.162a3 3 0 0 1-1.311 1.311C18.72 21 17.88 21 16.2 21H7.8c-1.68 0-2.52 0-3.162-.327a3 3 0 0 1-1.311-1.311C3 18.72 3 17.88 3 16.2V15m14-5-5 5m0 0-5-5m5 5V3"
      />
    </svg>
  );
};
</file>

<file path="src/ui-kit/icons/IconEdit.test.tsx">
import React from 'react';
import { describe, it, expect } from 'vitest';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
import { IconEdit } from './IconEdit';

describe('IconEdit Component', () => {
  it('renders with default props', () => {
    render(<IconEdit data-testid="edit-icon" />);
    const svg = screen.getByTestId('edit-icon');

    expect(svg).toBeInTheDocument();
    expect(svg).toHaveAttribute('width', '24');
    expect(svg).toHaveAttribute('height', '24');
    expect(svg).toHaveAttribute('viewBox', '0 0 20 20');
  });

  it('renders with custom size', () => {
    render(<IconEdit size={32} data-testid="edit-icon" />);
    const svg = screen.getByTestId('edit-icon');

    expect(svg).toHaveAttribute('width', '32');
    expect(svg).toHaveAttribute('height', '32');
  });

  it('renders with custom color', () => {
    render(<IconEdit color="red" data-testid="edit-icon" />);
    const path = screen.getByTestId('edit-icon').querySelector('path');

    expect(path).toHaveAttribute('stroke', 'red');
  });

  it('passes through additional native props', () => {
    render(<IconEdit data-testid="edit-icon" className="custom-class" aria-label="Edit" />);
    const svg = screen.getByTestId('edit-icon');

    expect(svg).toHaveClass('custom-class');
    expect(svg).toHaveAttribute('aria-label', 'Edit');
  });
});
</file>

<file path="src/ui-kit/icons/IconEdit.tsx">
import React from 'react';
import { IconProps } from './types';

export const IconEdit: React.FC<IconProps> = ({
  size = 24,
  color = 'currentColor',
  ...nativeProps
}) => {
  return (
    <svg
      width={size}
      height={size}
      viewBox="0 0 20 20"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...nativeProps}
    >
      <g clipPath="url(#clip0_16548_40098)">
        <path
          d="M15.0003 1.66602L18.3337 4.99935M1.66699 18.3327L2.73066 14.4326C2.80005 14.1781 2.83475 14.0509 2.88802 13.9323C2.93531 13.8269 2.99343 13.7268 3.06142 13.6334C3.138 13.5283 3.23125 13.4351 3.41775 13.2486L12.0289 4.63742C12.1939 4.47241 12.2764 4.38991 12.3716 4.359C12.4553 4.33181 12.5454 4.33181 12.6291 4.359C12.7242 4.38991 12.8067 4.47241 12.9717 4.63742L15.3623 7.02794C15.5273 7.19295 15.6098 7.27545 15.6407 7.37059C15.6679 7.45428 15.6679 7.54442 15.6407 7.62811C15.6098 7.72324 15.5273 7.80575 15.3623 7.97075L6.75108 16.5819C6.56458 16.7684 6.47134 16.8617 6.36623 16.9382C6.2729 17.0062 6.17276 17.0644 6.06742 17.1117C5.94878 17.1649 5.82156 17.1996 5.56711 17.269L1.66699 18.3327Z"
          stroke={color}
          strokeWidth="1.67643"
          strokeLinecap="round"
          strokeLinejoin="round"
        />
      </g>
      <defs>
        <clipPath id="clip0_16548_40098">
          <rect width="20" height="20" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};
</file>

<file path="src/ui-kit/icons/IconError.test.tsx">
import React from 'react';
import { describe, it, expect } from 'vitest';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
import { IconError } from './IconError';

describe('IconError Component', () => {
  it('renders with default props', () => {
    render(<IconError data-testid="error-icon" />);
    const svg = screen.getByTestId('error-icon');

    expect(svg).toBeInTheDocument();
    expect(svg).toHaveAttribute('width', '80');
    expect(svg).toHaveAttribute('height', '80');
    expect(svg).toHaveAttribute('viewBox', '0 0 80 80');
  });

  it('renders with custom size', () => {
    render(<IconError size={100} data-testid="error-icon" />);
    const svg = screen.getByTestId('error-icon');

    expect(svg).toHaveAttribute('width', '100');
    expect(svg).toHaveAttribute('height', '100');
  });

  it('renders with correct colors and shapes', () => {
    render(<IconError data-testid="error-icon" />);
    const svg = screen.getByTestId('error-icon');
    const [outerRect, innerRect] = svg.querySelectorAll('rect');
    const path = svg.querySelector('path');

    expect(outerRect).toHaveAttribute('fill', '#FFF2E8');
    expect(innerRect).toHaveAttribute('fill', '#FF4A32');
    expect(path).toHaveAttribute('stroke', 'white');
  });

  it('passes through additional native props', () => {
    render(<IconError data-testid="error-icon" className="custom-class" aria-label="Error" />);
    const svg = screen.getByTestId('error-icon');

    expect(svg).toHaveClass('custom-class');
    expect(svg).toHaveAttribute('aria-label', 'Error');
  });
});
</file>

<file path="src/ui-kit/icons/IconError.tsx">
import React from 'react';
import { IconProps } from './types';

export const IconError: React.FC<IconProps> = ({ size = 80, ...nativeProps }) => {
  return (
    <svg
      width={size}
      height={size}
      viewBox="0 0 80 80"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...nativeProps}
    >
      <rect width="80" height="80" rx="40" fill="#FFF2E8" />
      <rect x="14" y="14" width="52" height="52" rx="26" fill="#FF4A32" />
      <path
        d="M47 33L33 47M33 33L47 47"
        stroke="white"
        strokeWidth="2.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
};
</file>

<file path="src/ui-kit/icons/IconHelp.test.tsx">
import React from 'react';
import { describe, it, expect } from 'vitest';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
import { IconHelp } from './IconHelp';

describe('IconHelp Component', () => {
  it('renders with default props', () => {
    render(<IconHelp data-testid="help-icon" />);
    const svg = screen.getByTestId('help-icon');

    expect(svg).toBeInTheDocument();
    expect(svg).toHaveAttribute('width', '24');
    expect(svg).toHaveAttribute('height', '24');
    expect(svg).toHaveAttribute('viewBox', '0 0 24 24');
  });

  it('renders with custom size', () => {
    render(<IconHelp size={32} data-testid="help-icon" />);
    const svg = screen.getByTestId('help-icon');

    expect(svg).toHaveAttribute('width', '32');
    expect(svg).toHaveAttribute('height', '32');
  });

  it('renders with custom color', () => {
    render(<IconHelp color="red" data-testid="help-icon" />);
    const paths = screen.getByTestId('help-icon').querySelectorAll('path');
    paths.forEach(path => {
      const hasStroke = path.hasAttribute('stroke');
      const hasFill = path.hasAttribute('fill');
      if (hasStroke) expect(path).toHaveAttribute('stroke', 'red');
      if (hasFill) expect(path).toHaveAttribute('fill', 'red');
    });
  });

  it('passes through additional native props', () => {
    render(<IconHelp data-testid="help-icon" className="custom-class" aria-label="Help" />);
    const svg = screen.getByTestId('help-icon');

    expect(svg).toHaveClass('custom-class');
    expect(svg).toHaveAttribute('aria-label', 'Help');
  });
});
</file>

<file path="src/ui-kit/icons/IconHelp.tsx">
import React from 'react';
import { IconProps } from './types';

export const IconHelp: React.FC<IconProps> = ({
  size = 24,
  color = 'currentColor',
  ...nativeProps
}) => {
  return (
    <svg
      width={size}
      height={size}
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...nativeProps}
    >
      <path
        stroke={color}
        strokeWidth="2"
        d="m6.346 20.234-.022-.01-.022-.008c-1.167-.464-1.952-1.209-2.477-2.443-.55-1.293-.825-3.15-.825-5.83 0-3.98.711-6.089 1.985-7.265C6.278 3.483 8.41 3 11.955 3c3.592 0 5.747.484 7.052 1.68C20.289 5.856 21 7.963 21 11.944c0 3.82-.706 5.977-2.009 7.225C17.678 20.426 15.513 21 11.955 21c-2.553 0-4.384-.21-5.61-.766Z"
      />
      <path
        stroke={color}
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeMiterlimit="10"
        strokeWidth="2"
        d="M8.66 10.155c-.336-2.916 2.917-3.702 5.273-2.804 1.57.673 1.907 3.029.56 4.038-.672.561-1.794.561-1.906 1.57v1.347"
      />
      <path
        fill={color}
        d="M11.919 17.853c-.308-.293-.308-1.366 0-1.56.308-.294 1.23-.294 1.538 0 .308.292.308 1.267 0 1.56-.205.293-1.23.293-1.538 0Z"
      />
    </svg>
  );
};
</file>

<file path="src/ui-kit/icons/IconLike.test.tsx">
import React from 'react';
import { describe, it, expect } from 'vitest';
import { render } from '@testing-library/react';
import { IconLike } from './IconLike';

describe('IconLike Component', () => {
  it('renders with default props', () => {
    const { getByTestId } = render(<IconLike data-testid="like-icon" />);
    const icon = getByTestId('like-icon');

    // Check SVG attributes
    expect(icon).toHaveAttribute('width', '24');
    expect(icon).toHaveAttribute('height', '24');
    expect(icon).toHaveAttribute('viewBox', '0 0 24 24');

    // Check stroke color is currentColor by default
    const paths = icon.querySelectorAll('path');
    paths.forEach(path => {
      expect(path).toHaveAttribute('stroke', 'currentColor');
    });
  });

  it('renders with custom size and color', () => {
    const { getByTestId } = render(<IconLike data-testid="like-icon" size={32} color="#FF0000" />);
    const icon = getByTestId('like-icon');

    // Check custom size
    expect(icon).toHaveAttribute('width', '32');
    expect(icon).toHaveAttribute('height', '32');

    // Check custom color
    const paths = icon.querySelectorAll('path');
    paths.forEach(path => {
      expect(path).toHaveAttribute('stroke', '#FF0000');
    });
  });

  it('passes through additional SVG props', () => {
    const { getByTestId } = render(
      <IconLike data-testid="like-icon" className="custom-class" aria-label="Like Icon" />
    );
    const icon = getByTestId('like-icon');

    expect(icon).toHaveClass('custom-class');
    expect(icon).toHaveAttribute('aria-label', 'Like Icon');
  });

  it('has correct number of paths', () => {
    const { getByTestId } = render(<IconLike data-testid="like-icon" />);
    const icon = getByTestId('like-icon');
    const paths = icon.querySelectorAll('path');

    expect(paths.length).toBe(2);
  });
});
</file>

<file path="src/ui-kit/icons/IconLike.tsx">
import React from 'react';
import { IconProps } from './types';

export const IconLike: React.FC<IconProps> = ({
  size = 24,
  color = 'currentColor',
  ...nativeProps
}) => {
  return (
    <svg
      width={size}
      height={size}
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...nativeProps}
    >
      <path
        d="M7.48047 18.35L10.5805 20.75C10.9805 21.15 11.8805 21.35 12.4805 21.35L16.2805 21.35C17.4805 21.35 18.7805 20.45 19.0805 19.25L21.4805 11.95C21.9805 10.55 21.0805 9.34997 19.5805 9.34997L15.5805 9.34997C14.9805 9.34997 14.4805 8.84997 14.5805 8.14997L15.0805 4.94997C15.2805 4.04997 14.6805 3.04997 13.7805 2.74997C12.9805 2.44997 11.9805 2.84997 11.5805 3.44997L7.48047 9.54997"
        stroke={color}
        strokeWidth="1.8"
        strokeMiterlimit="10"
      />
      <path
        d="M2.37988 18.3499L2.37988 8.5499C2.37988 7.1499 2.97988 6.6499 4.37988 6.6499L5.37988 6.6499C6.77988 6.6499 7.37988 7.1499 7.37988 8.5499L7.37988 18.3499C7.37988 19.7499 6.77988 20.2499 5.37988 20.2499L4.37988 20.2499C2.97988 20.2499 2.37988 19.7499 2.37988 18.3499Z"
        stroke={color}
        strokeWidth="1.8"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
};
</file>

<file path="src/ui-kit/icons/IconLogo.test.tsx">
import React from 'react';
import { describe, it, expect } from 'vitest';
import { render } from '@testing-library/react';
import { IconLogo } from './IconLogo';

describe('IconLogo Component', () => {
  it('renders with default props', () => {
    const { getByTestId } = render(<IconLogo data-testid="logo-icon" />);
    const icon = getByTestId('logo-icon');

    // Check SVG attributes
    expect(icon).toHaveAttribute('width', '24');
    expect(icon).toHaveAttribute('height', '24');
    expect(icon).toHaveAttribute('viewBox', '0 0 24 24');

    // Check fill color is currentColor by default
    const paths = icon.querySelectorAll('path');
    paths.forEach(path => {
      expect(path).toHaveAttribute('fill', 'currentColor');
    });
  });

  it('renders with custom size and color', () => {
    const { getByTestId } = render(<IconLogo data-testid="logo-icon" size={32} color="#FF0000" />);
    const icon = getByTestId('logo-icon');

    // Check custom size
    expect(icon).toHaveAttribute('width', '32');
    expect(icon).toHaveAttribute('height', '32');

    // Check custom color
    const paths = icon.querySelectorAll('path');
    paths.forEach(path => {
      expect(path).toHaveAttribute('fill', '#FF0000');
    });
  });

  it('passes through additional SVG props', () => {
    const { getByTestId } = render(
      <IconLogo data-testid="logo-icon" className="custom-class" aria-label="Logo Icon" />
    );
    const icon = getByTestId('logo-icon');

    expect(icon).toHaveClass('custom-class');
    expect(icon).toHaveAttribute('aria-label', 'Logo Icon');
  });

  it('has correct number of paths', () => {
    const { getByTestId } = render(<IconLogo data-testid="logo-icon" />);
    const icon = getByTestId('logo-icon');
    const paths = icon.querySelectorAll('path');

    expect(paths.length).toBe(1);
  });

  it('has correct path attributes', () => {
    const { getByTestId } = render(<IconLogo data-testid="logo-icon" />);
    const icon = getByTestId('logo-icon');
    const path = icon.querySelector('path');

    // Check if the attributes are present in the path's attributes
    expect(path).toHaveAttribute('fill-rule', 'evenodd');
    expect(path).toHaveAttribute('clip-rule', 'evenodd');
  });
});
</file>

<file path="src/ui-kit/icons/IconLogo.tsx">
import React from 'react';
import { IconProps } from './types';

export const IconLogo: React.FC<IconProps> = ({
  size = 24,
  color = 'currentColor',
  ...nativeProps
}) => {
  return (
    <svg
      width={size}
      height={size}
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...nativeProps}
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M13.7757 1.99902H10.2314V7.7235L6.18208 3.67414L3.67588 6.18034L7.72246 10.2269H2V13.7712H7.7253L3.67915 17.8174L6.18535 20.3236L10.2314 16.2775V21.999H13.7757V16.2802L17.818 20.3225L20.3242 17.8163L16.2792 13.7712H22V10.2269H16.282L20.3275 6.18143L17.8213 3.67523L13.7757 7.72077V1.99902Z"
        fill={color}
      />
    </svg>
  );
};
</file>

<file path="src/ui-kit/icons/IconMenu.test.tsx">
import React from 'react';
import { describe, it, expect } from 'vitest';
import { render } from '@testing-library/react';
import { IconMenu } from './IconMenu';

describe('IconMenu Component', () => {
  it('renders with default props', () => {
    const { getByTestId } = render(<IconMenu data-testid="menu-icon" />);
    const icon = getByTestId('menu-icon');

    // Check SVG attributes
    expect(icon).toHaveAttribute('width', '24');
    expect(icon).toHaveAttribute('height', '24');
    expect(icon).toHaveAttribute('viewBox', '0 0 24 24');

    // Check fill color is currentColor by default
    const paths = icon.querySelectorAll('path');
    paths.forEach(path => {
      expect(path).toHaveAttribute('fill', 'currentColor');
    });
  });

  it('renders with custom size and color', () => {
    const { getByTestId } = render(<IconMenu data-testid="menu-icon" size={32} color="#FF0000" />);
    const icon = getByTestId('menu-icon');

    // Check custom size
    expect(icon).toHaveAttribute('width', '32');
    expect(icon).toHaveAttribute('height', '32');

    // Check custom color
    const paths = icon.querySelectorAll('path');
    paths.forEach(path => {
      expect(path).toHaveAttribute('fill', '#FF0000');
    });
  });

  it('passes through additional SVG props', () => {
    const { getByTestId } = render(
      <IconMenu data-testid="menu-icon" className="custom-class" aria-label="Menu Icon" />
    );
    const icon = getByTestId('menu-icon');

    expect(icon).toHaveClass('custom-class');
    expect(icon).toHaveAttribute('aria-label', 'Menu Icon');
  });

  it('has correct number of paths', () => {
    const { getByTestId } = render(<IconMenu data-testid="menu-icon" />);
    const icon = getByTestId('menu-icon');
    const paths = icon.querySelectorAll('path');

    expect(paths.length).toBe(3);
  });

  it('has correct path fill attributes', () => {
    const { getByTestId } = render(<IconMenu data-testid="menu-icon" />);
    const icon = getByTestId('menu-icon');
    const paths = icon.querySelectorAll('path');

    paths.forEach(path => {
      expect(path).toHaveAttribute('fill');
    });
  });
});
</file>

<file path="src/ui-kit/icons/IconMenu.tsx">
import React from 'react';
import { IconProps } from './types';

export const IconMenu: React.FC<IconProps> = ({
  size = 24,
  color = 'currentColor',
  ...nativeProps
}) => {
  return (
    <svg
      width={size}
      height={size}
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...nativeProps}
    >
      <path
        d="M3.59986 4.22402C4.40386 4.11602 5.20786 4.06802 5.99986 4.02002C6.79186 3.97202 11.2079 4.02002 11.9999 3.94802C12.7919 3.87602 17.1959 3.94802 17.9999 3.94802C18.8039 3.94802 19.6079 4.04402 20.3999 4.16402C20.6252 4.18983 20.8333 4.29765 20.9843 4.46694C21.1353 4.63623 21.2187 4.85516 21.2187 5.08202C21.2187 5.30887 21.1353 5.5278 20.9843 5.69709C20.8333 5.86638 20.6252 5.97421 20.3999 6.00002C19.6043 6.11718 18.8032 6.19328 17.9999 6.22802C17.1959 6.22802 12.7919 6.22802 11.9999 6.22802C11.2079 6.22802 6.79186 6.22802 5.99986 6.15602C5.20786 6.08402 4.39186 6.06002 3.59986 5.94002C3.47849 5.92535 3.36132 5.88644 3.2553 5.82559C3.14927 5.76474 3.05656 5.68319 2.98268 5.5858C2.9088 5.48841 2.85525 5.37716 2.82522 5.25866C2.79518 5.14017 2.78928 5.01684 2.80786 4.89602C2.85876 4.71832 2.96114 4.55967 3.10209 4.44008C3.24304 4.32049 3.41624 4.24531 3.59986 4.22402V4.22402Z"
        fill={color}
      />
      <path
        d="M3.60028 11.076C4.40428 10.968 5.20828 10.92 6.00028 10.872C6.79228 10.824 11.2083 10.8 12.0003 10.8C12.7923 10.8 17.1963 10.8 18.0003 10.86C18.8043 10.92 19.6083 10.956 20.4003 11.076C20.6438 11.1174 20.8616 11.2521 21.0073 11.4516C21.1529 11.651 21.215 11.8995 21.1803 12.144C21.1446 12.3378 21.0509 12.5161 20.9116 12.6554C20.7723 12.7947 20.594 12.8884 20.4003 12.924C19.5963 13.044 18.7923 13.092 18.0003 13.14C17.2083 13.188 12.7923 13.14 12.0003 13.2C11.2083 13.26 6.79228 13.2 6.00028 13.128C5.20828 13.056 4.39228 13.032 3.60028 12.924C3.38078 12.8886 3.18109 12.7761 3.03696 12.6068C2.89283 12.4375 2.81367 12.2224 2.81367 12C2.81367 11.7777 2.89283 11.5626 3.03696 11.3933C3.18109 11.224 3.38078 11.1115 3.60028 11.076Z"
        fill={color}
      />
      <path
        d="M3.60025 18.0001C4.40425 17.8801 5.20825 17.8321 6.00025 17.7841C6.79225 17.7361 11.2083 17.7841 12.0003 17.7121C12.7923 17.6401 17.1963 17.7121 18.0003 17.7121C18.8047 17.7667 19.6057 17.8628 20.4003 18.0001C20.5211 18.0176 20.6372 18.059 20.7419 18.1217C20.8466 18.1844 20.9379 18.2673 21.0104 18.3654C21.0829 18.4636 21.1353 18.5752 21.1644 18.6938C21.1936 18.8123 21.199 18.9354 21.1803 19.0561C21.1462 19.2505 21.053 19.4297 20.9135 19.5693C20.7739 19.7088 20.5947 19.802 20.4003 19.8361C19.5963 19.9561 18.7923 20.0041 18.0003 20.0521C17.2083 20.1001 12.7923 20.0521 12.0003 20.1121C11.2083 20.1721 6.79225 20.1121 6.00025 20.0401C5.20825 19.9681 4.39225 19.9441 3.60025 19.8361C3.35787 19.8003 3.13916 19.671 2.99108 19.4758C2.843 19.2806 2.77736 19.0351 2.80825 18.7921C2.83338 18.5908 2.92491 18.4036 3.06835 18.2601C3.21179 18.1167 3.39896 18.0252 3.60025 18.0001V18.0001Z"
        fill={color}
      />
    </svg>
  );
};
</file>

<file path="src/ui-kit/icons/IconMinus.test.tsx">
import React from 'react';
import { describe, it, expect } from 'vitest';
import { render } from '@testing-library/react';
import { IconMinus } from './IconMinus';

describe('IconMinus Component', () => {
  it('renders with default props', () => {
    const { getByTestId } = render(<IconMinus data-testid="minus-icon" />);
    const icon = getByTestId('minus-icon');

    // Check SVG attributes
    expect(icon).toHaveAttribute('width', '24');
    expect(icon).toHaveAttribute('height', '24');
    expect(icon).toHaveAttribute('viewBox', '0 0 24 24');

    // Check fill color is currentColor by default
    const paths = icon.querySelectorAll('path');
    paths.forEach(path => {
      expect(path).toHaveAttribute('fill', 'currentColor');
    });
  });

  it('renders with custom size and color', () => {
    const { getByTestId } = render(
      <IconMinus data-testid="minus-icon" size={32} color="#FF0000" />
    );
    const icon = getByTestId('minus-icon');

    // Check custom size
    expect(icon).toHaveAttribute('width', '32');
    expect(icon).toHaveAttribute('height', '32');

    // Check custom color
    const paths = icon.querySelectorAll('path');
    paths.forEach(path => {
      expect(path).toHaveAttribute('fill', '#FF0000');
    });
  });

  it('passes through additional SVG props', () => {
    const { getByTestId } = render(
      <IconMinus data-testid="minus-icon" className="custom-class" aria-label="Minus Icon" />
    );
    const icon = getByTestId('minus-icon');

    expect(icon).toHaveClass('custom-class');
    expect(icon).toHaveAttribute('aria-label', 'Minus Icon');
  });

  it('has correct number of paths', () => {
    const { getByTestId } = render(<IconMinus data-testid="minus-icon" />);
    const icon = getByTestId('minus-icon');
    const paths = icon.querySelectorAll('path');

    expect(paths.length).toBe(1);
  });

  it('has correct path fill attributes', () => {
    const { getByTestId } = render(<IconMinus data-testid="minus-icon" />);
    const icon = getByTestId('minus-icon');
    const paths = icon.querySelectorAll('path');

    paths.forEach(path => {
      expect(path).toHaveAttribute('fill');
    });
  });
});
</file>

<file path="src/ui-kit/icons/IconMinus.tsx">
import React from 'react';
import { IconProps } from './types';

export const IconMinus: React.FC<IconProps> = ({
  size = 24,
  color = 'currentColor',
  ...nativeProps
}) => {
  return (
    <svg
      width={size}
      height={size}
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...nativeProps}
    >
      <path
        d="M19.8019 12.9015C19.1716 13.0112 18.5329 13.0621 17.9026 13.1213C17.2723 13.1806 12.6253 13.1558 11.9867 13.1899C11.348 13.2239 6.71783 13.1655 6.07922 13.1323C5.43993 13.0901 4.80329 13.0148 4.17188 12.9068C3.96328 12.8635 3.77605 12.7497 3.6417 12.5845C3.50734 12.4193 3.43407 12.2128 3.43421 11.9997C3.43436 11.7867 3.50791 11.58 3.64249 11.4146C3.77707 11.2493 3.96446 11.1352 4.17312 11.0917C4.80357 10.9753 5.44074 10.8991 6.08077 10.8635C6.72782 10.8379 11.3581 10.8122 11.9967 10.8118C12.6353 10.8113 17.274 10.8277 17.9126 10.8777C18.5512 10.9277 19.1898 10.9777 19.8115 11.0949C20.0515 11.1384 20.2645 11.2748 20.4044 11.4745C20.5442 11.6742 20.5997 11.921 20.5586 12.1616C20.5245 12.348 20.4334 12.5193 20.2978 12.6518C20.1623 12.7844 19.989 12.8716 19.8019 12.9015Z"
        fill={color}
      />
    </svg>
  );
};
</file>

<file path="src/ui-kit/icons/IconPlus.test.tsx">
import React from 'react';
import { describe, it, expect } from 'vitest';
import { render } from '@testing-library/react';
import { IconPlus } from './IconPlus';

describe('IconPlus Component', () => {
  it('renders with default props', () => {
    const { getByTestId } = render(<IconPlus data-testid="plus-icon" />);
    const icon = getByTestId('plus-icon');

    // Check SVG attributes
    expect(icon).toHaveAttribute('width', '24');
    expect(icon).toHaveAttribute('height', '24');
    expect(icon).toHaveAttribute('viewBox', '0 0 24 24');

    // Check fill color is currentColor by default
    const paths = icon.querySelectorAll('path');
    paths.forEach(path => {
      expect(path).toHaveAttribute('fill', 'currentColor');
    });
  });

  it('renders with custom size and color', () => {
    const { getByTestId } = render(<IconPlus data-testid="plus-icon" size={32} color="#FF0000" />);
    const icon = getByTestId('plus-icon');

    // Check custom size
    expect(icon).toHaveAttribute('width', '32');
    expect(icon).toHaveAttribute('height', '32');

    // Check custom color
    const paths = icon.querySelectorAll('path');
    paths.forEach(path => {
      expect(path).toHaveAttribute('fill', '#FF0000');
    });
  });

  it('passes through additional SVG props', () => {
    const { getByTestId } = render(
      <IconPlus data-testid="plus-icon" className="custom-class" aria-label="Plus Icon" />
    );
    const icon = getByTestId('plus-icon');

    expect(icon).toHaveClass('custom-class');
    expect(icon).toHaveAttribute('aria-label', 'Plus Icon');
  });

  it('has correct number of paths', () => {
    const { getByTestId } = render(<IconPlus data-testid="plus-icon" />);
    const icon = getByTestId('plus-icon');
    const paths = icon.querySelectorAll('path');

    expect(paths.length).toBe(1);
  });

  it('has correct path attributes', () => {
    const { getByTestId } = render(<IconPlus data-testid="plus-icon" />);
    const icon = getByTestId('plus-icon');
    const path = icon.querySelector('path');

    expect(path).toHaveAttribute('fill-rule', 'evenodd');
    expect(path).toHaveAttribute('clip-rule', 'evenodd');
  });
});
</file>

<file path="src/ui-kit/icons/IconPlus.tsx">
import React from 'react';
import { IconProps } from './types';

export const IconPlus: React.FC<IconProps> = ({
  size = 24,
  color = 'currentColor',
  ...nativeProps
}) => {
  return (
    <svg
      width={size}
      height={size}
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...nativeProps}
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M13.1397 6.11362C13.1036 5.47798 13.031 4.84497 12.9222 4.21771C12.8776 4.0349 12.7796 3.86953 12.6407 3.7426C12.5018 3.61568 12.3283 3.53293 12.1423 3.50488C12.0232 3.48441 11.9013 3.48775 11.7835 3.51473C11.6657 3.5417 11.5544 3.59176 11.4561 3.66201C11.3578 3.73227 11.2743 3.82132 11.2106 3.92401C11.1469 4.0267 11.1042 4.141 11.0849 4.26028C10.9764 4.89078 10.9006 5.52645 10.8578 6.16474C10.8267 6.55668 10.821 6.94861 10.8153 7.3386C10.8117 7.58304 10.8082 7.82671 10.7984 8.06914C10.8206 8.68435 10.8427 9.31633 10.8649 9.9651C10.8871 10.2994 10.9183 10.6329 10.9586 10.9653C10.6283 10.9298 10.2956 10.9037 9.96287 10.8777L9.96285 10.8777C9.32425 10.8277 8.68563 10.8114 8.04699 10.8118C7.4243 10.8122 6.80958 10.8366 6.17948 10.8616L6.13106 10.8635C5.49104 10.8991 4.85387 10.9753 4.22341 11.0917C4.01476 11.1352 3.82737 11.2493 3.69279 11.4146C3.55821 11.58 3.48465 11.7867 3.48451 11.9997C3.48436 12.2128 3.55763 12.4193 3.69199 12.5845C3.82634 12.7497 4.01358 12.8635 4.22217 12.9068C4.85359 13.0148 5.49022 13.0901 6.12951 13.1323C6.26794 13.1395 6.40598 13.1479 6.54379 13.1563C7.04173 13.1865 7.53675 13.2165 8.03697 13.1899C8.29981 13.1758 8.56408 13.1718 8.82801 13.1677C9.20536 13.162 9.58204 13.1562 9.95291 13.1213C10.037 13.1134 10.1212 13.1057 10.2055 13.0979C10.4516 13.0752 10.6986 13.0525 10.9456 13.0257C10.8991 13.3711 10.8638 13.718 10.8398 14.0659C10.8337 14.2191 10.8261 14.3737 10.8186 14.5292L10.8186 14.5293C10.795 15.0118 10.7711 15.5016 10.7903 15.9772C10.7988 16.1875 10.8036 16.3997 10.8083 16.6125L10.8083 16.6126C10.8178 17.0359 10.8274 17.4617 10.8666 17.8801C10.9032 18.5152 10.9762 19.1478 11.0854 19.7747C11.1261 19.9581 11.2203 20.1254 11.3562 20.2553C11.4921 20.3853 11.6634 20.4719 11.8486 20.5043C11.9675 20.5249 12.0894 20.5216 12.207 20.4948C12.3247 20.4679 12.4359 20.418 12.5341 20.3478C12.6323 20.2777 12.7156 20.1888 12.7791 20.0862C12.8427 19.9837 12.8853 19.8695 12.9044 19.7503C13.0124 19.1204 13.0876 18.4853 13.1299 17.8475C13.1607 17.456 13.1661 17.0644 13.1715 16.6747L13.1715 16.6746C13.1748 16.4304 13.1782 16.1869 13.1878 15.9447C13.1875 15.3076 13.1704 14.6705 13.1366 14.0334C13.1141 13.6982 13.0825 13.3638 13.0418 13.0304C13.3706 13.0659 13.7019 13.0921 14.0331 13.1182C14.6722 13.1687 15.3112 13.1855 15.9503 13.1855C16.5735 13.1855 17.1886 13.1616 17.8191 13.137L17.8191 13.137L17.8676 13.1351C18.508 13.1 19.1456 13.0242 19.7764 12.9081C19.9852 12.8647 20.1726 12.7507 20.3072 12.5853C20.4418 12.4199 20.5152 12.2132 20.5152 12C20.5152 11.7867 20.4417 11.58 20.3072 11.4146C20.1726 11.2492 19.9851 11.1352 19.7764 11.0918C19.1444 10.9832 18.5073 10.9074 17.8675 10.8647C17.6835 10.855 17.5023 10.8383 17.3217 10.8217C16.8749 10.7807 16.4317 10.7399 15.9587 10.8058C15.5876 10.8574 15.2297 10.8593 14.876 10.861C14.5966 10.8625 14.3198 10.8639 14.0414 10.8898C13.9573 10.8977 13.8731 10.9054 13.7887 10.9131C13.5448 10.9354 13.3 10.9577 13.0552 10.984C13.1028 10.6343 13.139 10.283 13.1636 9.93076C13.1698 9.77745 13.1774 9.62264 13.1851 9.46707L13.1851 9.46705L13.1851 9.46702C13.2091 8.98412 13.2334 8.49384 13.2146 8.01798C13.2062 7.80748 13.2016 7.59511 13.197 7.38212C13.1878 6.95845 13.1786 6.53232 13.1397 6.11362Z"
        fill={color}
      />
    </svg>
  );
};
</file>

<file path="src/ui-kit/icons/IconRedo.test.tsx">
import React from 'react';
import { describe, it, expect } from 'vitest';
import { render } from '@testing-library/react';
import { IconRedo } from './IconRedo';

describe('IconRedo Component', () => {
  it('renders with default props', () => {
    const { getByTestId } = render(<IconRedo data-testid="redo-icon" />);
    const icon = getByTestId('redo-icon');

    // Check SVG attributes
    expect(icon).toHaveAttribute('width', '24');
    expect(icon).toHaveAttribute('height', '24');
    expect(icon).toHaveAttribute('viewBox', '0 0 16 16');

    // Check default class
    expect(icon).toHaveClass('stroke-current');

    // Check stroke color is currentColor by default
    const paths = icon.querySelectorAll('path');
    paths.forEach(path => {
      expect(path).toHaveAttribute('stroke', 'currentColor');
    });
  });

  it('renders with custom size and color', () => {
    const { getByTestId } = render(<IconRedo data-testid="redo-icon" size={32} color="#FF0000" />);
    const icon = getByTestId('redo-icon');

    // Check custom size
    expect(icon).toHaveAttribute('width', '32');
    expect(icon).toHaveAttribute('height', '32');

    // Check custom color
    const paths = icon.querySelectorAll('path');
    paths.forEach(path => {
      expect(path).toHaveAttribute('stroke', '#FF0000');
    });
  });

  it('passes through additional SVG props', () => {
    const { getByTestId } = render(
      <IconRedo data-testid="redo-icon" className="custom-class" aria-label="Redo Icon" />
    );
    const icon = getByTestId('redo-icon');

    expect(icon).toHaveClass('custom-class');
    expect(icon).toHaveClass('stroke-current');
    expect(icon).toHaveAttribute('aria-label', 'Redo Icon');
  });

  it('has correct number of paths', () => {
    const { getByTestId } = render(<IconRedo data-testid="redo-icon" />);
    const icon = getByTestId('redo-icon');
    const paths = icon.querySelectorAll('path');

    expect(paths.length).toBe(1);
  });

  it('has correct path attributes', () => {
    const { getByTestId } = render(<IconRedo data-testid="redo-icon" />);
    const icon = getByTestId('redo-icon');
    const path = icon.querySelector('path');

    expect(path).toHaveAttribute('stroke-width', '2');
    expect(path).toHaveAttribute('stroke-linecap', 'round');
    expect(path).toHaveAttribute('stroke-linejoin', 'round');
  });

  it('combines className with default stroke class', () => {
    const { getByTestId } = render(<IconRedo data-testid="redo-icon" className="test-class" />);
    const icon = getByTestId('redo-icon');

    expect(icon).toHaveClass('stroke-current');
    expect(icon).toHaveClass('test-class');
  });
});
</file>

<file path="src/ui-kit/icons/IconRedo.tsx">
import React from 'react';
import { IconProps } from './types';
import { cn } from '../utils/cn';

export const IconRedo: React.FC<IconProps> = ({
  size = 24,
  color = 'currentColor',
  className,
  ...nativeProps
}) => {
  return (
    <svg
      width={size}
      height={size}
      viewBox="0 0 16 16"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className={cn('stroke-current', className)}
      {...nativeProps}
    >
      <path
        d="M14.6667 4.83333H6.33337C3.57195 4.83333 1.33337 7.07191 1.33337 9.83333C1.33337 12.5948 3.57195 14.8333 6.33337 14.8333H14.6667M14.6667 4.83333L11.3334 1.5M14.6667 4.83333L11.3334 8.16667"
        stroke={color}
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
};
</file>

<file path="src/ui-kit/icons/IconReload.test.tsx">
import React from 'react';
import { describe, it, expect } from 'vitest';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
import { IconReload } from './IconReload';

describe('IconReload Component', () => {
  it('renders with default props', () => {
    render(<IconReload data-testid="reload-icon" />);
    const svg = screen.getByTestId('reload-icon');

    expect(svg).toBeInTheDocument();
    expect(svg).toHaveAttribute('width', '24');
    expect(svg).toHaveAttribute('height', '24');
    expect(svg).toHaveAttribute('viewBox', '0 0 16 16');
  });

  it('renders with custom size', () => {
    render(<IconReload size={32} data-testid="reload-icon" />);
    const svg = screen.getByTestId('reload-icon');

    expect(svg).toHaveAttribute('width', '32');
    expect(svg).toHaveAttribute('height', '32');
  });

  it('renders with custom color', () => {
    render(<IconReload color="red" data-testid="reload-icon" />);
    const paths = screen.getByTestId('reload-icon').querySelectorAll('path');

    paths.forEach(path => {
      const fillOrStroke = path.hasAttribute('stroke') ? 'stroke' : 'fill';
      expect(path).toHaveAttribute(fillOrStroke, 'red');
    });
  });

  it('passes through additional native props', () => {
    render(<IconReload data-testid="reload-icon" className="custom-class" aria-label="Reload" />);
    const svg = screen.getByTestId('reload-icon');

    expect(svg).toHaveClass('custom-class');
    expect(svg).toHaveAttribute('aria-label', 'Reload');
  });
});
</file>

<file path="src/ui-kit/icons/IconReload.tsx">
import React from 'react';
import { IconProps } from './types';

export const IconReload: React.FC<IconProps> = ({
  size = 24,
  color = 'currentColor',
  ...nativeProps
}) => {
  return (
    <svg
      width={size}
      height={size}
      viewBox="0 0 16 16"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...nativeProps}
    >
      <path
        d="M14.7508 2.59177C14.8428 2.94671 14.8954 3.30166 14.9348 3.66975C14.9742 4.02469 14.9874 4.37964 14.9874 4.74773C14.9874 5.10267 14.9742 5.45762 14.9348 5.82571C14.8954 6.18065 14.8428 6.5356 14.7376 6.89054C14.6062 7.31122 14.1592 7.56099 13.7385 7.44268C13.4624 7.3638 13.2653 7.14032 13.1864 6.89054C13.0812 6.5356 13.0286 6.18065 13.0023 5.81256C12.9629 5.45762 12.9629 5.10267 12.9629 4.73458C12.9629 4.37964 12.9892 4.02469 13.0155 3.6566C13.0549 3.30166 13.1075 2.94671 13.1995 2.59177C13.3178 2.17109 13.7517 1.90817 14.1855 2.02648C14.4747 2.09221 14.685 2.3157 14.7508 2.59177Z"
        fill={color}
      />
      <path
        d="M14.0024 7.61404C13.6474 7.70606 13.2925 7.75865 12.9375 7.79809C12.5826 7.83753 12.2276 7.85067 11.8595 7.85067C11.5046 7.85067 11.1497 7.85067 10.7816 7.81123C10.4266 7.7718 10.0717 7.71921 9.70358 7.62719C9.26976 7.50887 9.03313 7.06191 9.15145 6.62808C9.23032 6.35202 9.44066 6.15482 9.70358 6.07595C10.0585 5.97078 10.4135 5.91819 10.7684 5.87876C11.1234 5.83932 11.4783 5.82617 11.8464 5.82617C12.2013 5.82617 12.5563 5.83932 12.9244 5.87876C13.2793 5.91819 13.6343 5.95763 14.0024 6.0628C14.4362 6.16797 14.686 6.61494 14.5808 7.03561C14.4888 7.32483 14.2653 7.53517 14.0024 7.61404Z"
        fill={color}
      />
      <path
        d="M2 6.1154C3.06483 4.11719 5.18136 2.75 7.61339 2.75C9.9271 2.75 11.9647 3.98573 13.069 5.83933"
        stroke={color}
        strokeWidth="1.7"
        strokeMiterlimit="10"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M1.23663 14.5815C1.14461 14.2265 1.09202 13.8716 1.05258 13.5035C1.01315 13.1486 1 12.7936 1 12.4255C1 12.0706 1.01315 11.7156 1.05258 11.3475C1.09202 10.9926 1.14461 10.6377 1.24978 10.2827C1.38124 9.86203 1.8282 9.61226 2.24888 9.73057C2.52495 9.80945 2.72214 10.0329 2.80102 10.2827C2.90619 10.6377 2.95877 10.9926 2.98506 11.3607C3.0245 11.7156 3.0245 12.0706 3.0245 12.4387C3.0245 12.7936 2.99821 13.1486 2.97192 13.5166C2.93248 13.8716 2.87989 14.2265 2.78787 14.5815C2.66956 15.0022 2.23573 15.2651 1.80191 15.1468C1.52584 15.0679 1.31551 14.8444 1.23663 14.5815Z"
        fill={color}
      />
      <path
        d="M1.99835 9.5462C2.35329 9.45418 2.70824 9.40159 3.06318 9.36215C3.41812 9.32272 3.77307 9.30957 4.14116 9.30957C4.49611 9.30957 4.85105 9.30957 5.21914 9.34901C5.57409 9.38845 5.92903 9.44103 6.29712 9.53305C6.73094 9.65137 6.96757 10.0983 6.84926 10.5322C6.77038 10.8082 6.56004 11.0054 6.29712 11.0843C5.94218 11.1895 5.58723 11.242 5.23229 11.2815C4.8642 11.3209 4.50925 11.3341 4.14116 11.3341C3.78622 11.3341 3.43127 11.3209 3.06318 11.2815C2.70824 11.242 2.35329 11.2026 1.9852 11.0974C1.55138 10.9923 1.3016 10.5453 1.40677 10.1246C1.49879 9.83541 1.72228 9.62508 1.99835 9.5462Z"
        fill={color}
      />
      <path
        d="M13.9889 11.0449C12.9241 13.0431 10.8076 14.4103 8.37556 14.4103C6.06184 14.4103 4.02419 13.1746 2.91992 11.321"
        stroke={color}
        strokeWidth="1.7"
        strokeMiterlimit="10"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
};
</file>

<file path="src/ui-kit/icons/IconSave.test.tsx">
import React from 'react';
import { describe, it, expect } from 'vitest';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
import { IconSave } from './IconSave';

describe('IconSave Component', () => {
  it('renders with default props', () => {
    render(<IconSave data-testid="save-icon" />);
    const svg = screen.getByTestId('save-icon');

    expect(svg).toBeInTheDocument();
    expect(svg).toHaveAttribute('width', '24');
    expect(svg).toHaveAttribute('height', '24');
    expect(svg).toHaveAttribute('viewBox', '0 0 24 24');
  });

  it('renders with custom size', () => {
    render(<IconSave size={32} data-testid="save-icon" />);
    const svg = screen.getByTestId('save-icon');

    expect(svg).toHaveAttribute('width', '32');
    expect(svg).toHaveAttribute('height', '32');
  });

  it('renders with custom color', () => {
    render(<IconSave color="red" data-testid="save-icon" />);
    const path = screen.getByTestId('save-icon').querySelector('path');

    expect(path).toHaveAttribute('stroke', 'red');
  });

  it('passes through additional native props', () => {
    render(<IconSave data-testid="save-icon" className="custom-class" aria-label="Save" />);
    const svg = screen.getByTestId('save-icon');

    expect(svg).toHaveClass('custom-class');
    expect(svg).toHaveAttribute('aria-label', 'Save');
  });
});
</file>

<file path="src/ui-kit/icons/IconSave.tsx">
import React from 'react';
import { IconProps } from './types';

export const IconSave: React.FC<IconProps> = ({
  size = 24,
  color = 'currentColor',
  ...nativeProps
}) => {
  return (
    <svg
      width={size}
      height={size}
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...nativeProps}
    >
      <path
        stroke={color}
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        d="M5 7.8c0-1.68 0-2.52.327-3.162a3 3 0 0 1 1.311-1.311C7.28 3 8.12 3 9.8 3h4.4c1.68 0 2.52 0 3.162.327a3 3 0 0 1 1.311 1.311C19 5.28 19 6.12 19 7.8V21l-7-4-7 4V7.8Z"
      />
    </svg>
  );
};
</file>

<file path="src/ui-kit/icons/IconSearch.test.tsx">
import React from 'react';
import { describe, it, expect } from 'vitest';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
import { IconSearch } from './IconSearch';

describe('IconSearch Component', () => {
  it('renders with default props', () => {
    render(<IconSearch data-testid="search-icon" />);
    const svg = screen.getByTestId('search-icon');

    expect(svg).toBeInTheDocument();
    expect(svg).toHaveAttribute('width', '24');
    expect(svg).toHaveAttribute('height', '24');
    expect(svg).toHaveAttribute('viewBox', '0 0 20 18');
  });

  it('renders with custom size', () => {
    render(<IconSearch size={32} data-testid="search-icon" />);
    const svg = screen.getByTestId('search-icon');

    expect(svg).toHaveAttribute('width', '32');
    expect(svg).toHaveAttribute('height', '32');
  });

  it('renders with custom color', () => {
    render(<IconSearch color="red" data-testid="search-icon" />);
    const path = screen.getByTestId('search-icon').querySelector('path');

    expect(path).toHaveAttribute('fill', 'red');
  });

  it('passes through additional native props', () => {
    render(<IconSearch data-testid="search-icon" className="custom-class" aria-label="Search" />);
    const svg = screen.getByTestId('search-icon');

    expect(svg).toHaveClass('custom-class');
    expect(svg).toHaveAttribute('aria-label', 'Search');
  });
});
</file>

<file path="src/ui-kit/icons/IconSearch.tsx">
import React from 'react';
import { IconProps } from './types';

export const IconSearch: React.FC<IconProps> = ({
  size = 24,
  color = 'currentColor',
  ...nativeProps
}) => {
  return (
    <svg
      width={size}
      height={size}
      viewBox="0 0 20 18"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...nativeProps}
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M8.89828 2.48433C8.34623 2.26913 7.75715 2.16496 7.16477 2.17778C6.5724 2.19061 5.98838 2.32018 5.44616 2.55907C4.90394 2.79796 4.41417 3.14148 4.00493 3.56995L4.00443 3.57047L3.30923 4.29727L3.3089 4.29762C2.48038 5.1659 2.02972 6.32713 2.05563 7.52701C2.08153 8.72667 2.58172 9.86718 3.44666 10.6988L3.44747 10.6996L4.17336 11.394L3.50715 12.0904L4.17337 11.394C4.60225 11.8042 5.1078 12.1259 5.66111 12.3405C6.21442 12.5552 6.80462 12.6587 7.39796 12.6451C7.9913 12.6314 8.57613 12.501 9.11899 12.2611C9.66098 12.0216 10.1505 11.6778 10.5597 11.2493L11.2414 10.5257L7.16477 2.17778L11.2429 10.524L11.2463 10.5204L11.249 10.5175L11.2491 10.5175L11.2536 10.5128C11.6622 10.0855 11.983 9.58209 12.1976 9.03113C12.413 8.47813 12.5173 7.88808 12.5044 7.29475C12.4916 6.70142 12.3619 6.11644 12.1228 5.57327C11.8837 5.03009 11.5399 4.53939 11.111 4.12923L11.1109 4.12914L10.3833 3.43317L10.3819 3.43188C9.9545 3.02153 9.45033 2.69953 8.89828 2.48433ZM14.0612 9.75705C13.8864 10.2058 13.6628 10.6327 13.3951 11.0304L14.8095 12.0954C15.1073 11.8904 15.4287 11.775 15.7353 11.8003C16.5799 11.9873 17.3758 12.3496 18.0715 12.8636C18.7672 13.3777 19.3472 14.0321 19.774 14.7845C19.9816 15.1371 20.0493 15.5548 19.9638 15.955C19.898 16.2926 19.7614 16.6124 19.5631 16.8935C17.7163 19.5693 14.6581 16.0007 14.1919 15.4566L14.1852 15.4488C13.9743 15.2567 13.8132 15.0162 13.7159 14.748C13.6185 14.4798 13.5878 14.192 13.6263 13.9093C13.6366 13.8519 13.6494 13.7944 13.6645 13.7368L12.0847 12.5472L12.0133 12.623L12.0091 12.6275C11.418 13.2472 10.7106 13.7444 9.92729 14.0905C9.14395 14.4366 8.30006 14.6249 7.44389 14.6445C6.58772 14.6642 5.73608 14.5149 4.93767 14.2051C4.13927 13.8953 3.40978 13.4312 2.79092 12.8392L2.79091 12.8392L2.06332 12.1433L2.06161 12.1416C0.814597 10.9432 0.0934314 9.29933 0.0560949 7.57018C0.0187584 5.84104 0.668296 4.16759 1.86242 2.91642L1.86318 2.91563L2.55864 2.18855L2.55888 2.1883C3.14979 1.5697 3.85693 1.07375 4.63979 0.728831C5.42276 0.383871 6.26609 0.196772 7.12148 0.178252C7.97687 0.159732 8.82751 0.310155 9.62468 0.620904C10.4216 0.931547 11.1494 1.3963 11.7664 1.98857L11.767 1.98918L12.4932 2.68376L12.4933 2.68385C13.1122 3.27569 13.6083 3.98373 13.9533 4.76747C14.2983 5.55125 14.4855 6.39536 14.504 7.25152C14.5225 8.10768 14.372 8.95909 14.0612 9.75705Z"
        fill={color}
      />
    </svg>
  );
};
</file>

<file path="src/ui-kit/icons/IconSend.test.tsx">
import React from 'react';
import { describe, it, expect } from 'vitest';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
import { IconSend } from './IconSend';

describe('IconSend Component', () => {
  it('renders with default props', () => {
    render(<IconSend data-testid="send-icon" />);
    const svg = screen.getByTestId('send-icon');

    expect(svg).toBeInTheDocument();
    expect(svg).toHaveAttribute('width', '24');
    expect(svg).toHaveAttribute('height', '24');
    expect(svg).toHaveAttribute('viewBox', '0 0 24 24');
  });

  it('renders with custom size', () => {
    render(<IconSend size={32} data-testid="send-icon" />);
    const svg = screen.getByTestId('send-icon');

    expect(svg).toHaveAttribute('width', '32');
    expect(svg).toHaveAttribute('height', '32');
  });

  it('renders with custom color', () => {
    render(<IconSend color="red" data-testid="send-icon" />);
    const path = screen.getByTestId('send-icon').querySelector('path');

    expect(path).toHaveAttribute('stroke', 'red');
  });

  it('passes through additional native props', () => {
    render(<IconSend data-testid="send-icon" className="custom-class" aria-label="Send" />);
    const svg = screen.getByTestId('send-icon');

    expect(svg).toHaveClass('custom-class');
    expect(svg).toHaveAttribute('aria-label', 'Send');
  });
});
</file>

<file path="src/ui-kit/icons/IconSend.tsx">
import { IconProps } from './types';
import React from 'react';

export const IconSend: React.FC<IconProps> = ({
  size = 24,
  color = 'currentColor',
  ...nativeProps
}) => {
  return (
    <svg
      width={size}
      height={size}
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...nativeProps}
    >
      <path
        stroke={color}
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        d="m5 12-.604-5.437C4.223 5.007 5.825 3.864 7.24 4.535l11.944 5.658c1.525.722 1.525 2.892 0 3.614L7.24 19.465c-1.415.67-3.017-.472-2.844-2.028L5 12Zm0 0h7"
      />
    </svg>
  );
};
</file>

<file path="src/ui-kit/icons/IconSettings.test.tsx">
import React from 'react';
import { describe, it, expect } from 'vitest';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
import { IconSettings } from './IconSettings';

describe('IconSettings Component', () => {
  it('renders with default props', () => {
    render(<IconSettings data-testid="settings-icon" />);
    const svg = screen.getByTestId('settings-icon');

    expect(svg).toBeInTheDocument();
    expect(svg).toHaveAttribute('width', '24');
    expect(svg).toHaveAttribute('height', '24');
    expect(svg).toHaveAttribute('viewBox', '0 0 24 24');
  });

  it('renders with custom size', () => {
    render(<IconSettings size={32} data-testid="settings-icon" />);
    const svg = screen.getByTestId('settings-icon');

    expect(svg).toHaveAttribute('width', '32');
    expect(svg).toHaveAttribute('height', '32');
  });

  it('renders with custom color for both fill and stroke paths', () => {
    render(<IconSettings color="red" data-testid="settings-icon" />);
    const paths = screen.getByTestId('settings-icon').querySelectorAll('path');
    // First path uses fill
    expect(paths[0]).toHaveAttribute('fill', 'red');
    // Second path uses stroke
    expect(paths[1]).toHaveAttribute('stroke', 'red');
  });

  it('passes through additional native props', () => {
    render(
      <IconSettings data-testid="settings-icon" className="custom-class" aria-label="Settings" />
    );
    const svg = screen.getByTestId('settings-icon');

    expect(svg).toHaveClass('custom-class');
    expect(svg).toHaveAttribute('aria-label', 'Settings');
  });
});
</file>

<file path="src/ui-kit/icons/IconSettings.tsx">
import React from 'react';
import { IconProps } from './types';

export const IconSettings: React.FC<IconProps> = ({
  size = 24,
  color = 'currentColor',
  ...nativeProps
}) => {
  return (
    <svg
      width={size}
      height={size}
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...nativeProps}
    >
      <path
        fill={color}
        d="M11.585 21.995a4.869 4.869 0 0 1-1.927-.3 2.646 2.646 0 0 1-1.39-1.869 2.491 2.491 0 0 1-.804.19 3.526 3.526 0 0 1-2.78-1.239 4.755 4.755 0 0 1-1.152-1.579 2.584 2.584 0 0 1 .16-1.998h-.11c-1.39-.55-1.569-1.999-1.569-3.238a3.578 3.578 0 0 1 1.122-2.918c.252-.215.541-.381.854-.49a2.264 2.264 0 0 1-.14-.26c-.615-1.418.279-2.587 1.143-3.446 1.201-1.21 2.264-1.59 3.376-1.13.575-1.469 1.906-1.708 3.217-1.708a3.504 3.504 0 0 1 2.82 1.099c.175.2.319.426.426.67.45-.3.98-.453 1.52-.44.926.12 1.773.587 2.373 1.309 1.35 1.369 1.658 2.568.913 3.857C21.255 8.825 22 9.934 22 11.932c0 1.829-.606 2.908-1.936 3.328.715 1.269.397 2.458-.924 3.797-1.32 1.339-2.74 1.689-4.13.72-.397 1.518-1.48 2.218-3.425 2.218Zm-2.493-5.067c.14.002.278.029.407.08a.995.995 0 0 1 .586 1c-.07.799.13 1.758.378 1.868.36.104.736.147 1.112.13 1.33 0 1.539-.2 1.539-1.549a3.434 3.434 0 0 0-.1-.91 1.005 1.005 0 0 1 .603-1.198.986.986 0 0 1 1.244.49c.177.298.398.567.655.799.944.95 1.222.95 2.175 0 .953-.95.933-1.21 0-2.169a2.653 2.653 0 0 0-.258-.23 1.001 1.001 0 0 1-.278-1.139.998.998 0 0 1 .993-.639h.347c1.33 0 1.53-.21 1.53-1.549s-.19-1.529-1.53-1.529c-.286 0-.572.023-.854.07a.988.988 0 0 1-1.151-.52 1.005 1.005 0 0 1 .327-1.218c.186-.13.359-.277.516-.44.993-1 .934-1.22 0-2.168-.466-.48-.824-.72-.992-.73-.17-.01-.447.08-1.093.73-.129.12-.228.24-.327.35a.992.992 0 0 1-1.593-.115 1.004 1.004 0 0 1-.155-.605.778.778 0 0 1 0-.14 1.52 1.52 0 0 0-.218-1.17 1.785 1.785 0 0 0-1.32-.409c-1.38-.01-1.55.14-1.55 1.41a1.004 1.004 0 0 1-.61.917.987.987 0 0 1-1.078-.208c-.774-.75-.993-.89-1.985.12-.993 1.009-.795 1.139-.745 1.249.3.418.631.813.993 1.179a1.001 1.001 0 0 1 .228 1.129.997.997 0 0 1-.993.6h-.178a1.55 1.55 0 0 0-1.34.18c-.296.379-.432.86-.378 1.338 0 1.26.238 1.35.357 1.4.348.117.716.164 1.083.139a.989.989 0 0 1 .913.64 1.005 1.005 0 0 1-.238 1.089c-.437.44-.785 1.109-.715 1.289.187.326.421.622.695.88.31.37.752.606 1.231.659a1.455 1.455 0 0 0 .993-.68l.1-.12a.99.99 0 0 1 .674-.3Z"
      />
      <path
        stroke={color}
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        d="M10.46 14.32c-.72-.28-1-1-1-2.33 0-2 .72-2.53 2.53-2.53 1.81 0 2.55.48 2.55 2.53s-.72 2.55-2.55 2.55a3.811 3.811 0 0 1-1.53-.22v0Z"
      />
    </svg>
  );
};
</file>

<file path="src/ui-kit/icons/IconUser.test.tsx">
import React from 'react';
import { describe, it, expect } from 'vitest';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
import { IconUser } from './IconUser';

describe('IconUser Component', () => {
  it('renders with default props', () => {
    render(<IconUser data-testid="user-icon" />);
    const svg = screen.getByTestId('user-icon');

    expect(svg).toBeInTheDocument();
    expect(svg).toHaveAttribute('width', '24');
    expect(svg).toHaveAttribute('height', '24');
    expect(svg).toHaveAttribute('viewBox', '0 0 20 20');
  });

  it('renders with custom size', () => {
    render(<IconUser size={32} data-testid="user-icon" />);
    const svg = screen.getByTestId('user-icon');

    expect(svg).toHaveAttribute('width', '32');
    expect(svg).toHaveAttribute('height', '32');
  });

  it('renders with custom color and correct stroke attributes', () => {
    render(<IconUser color="red" data-testid="user-icon" />);
    const path = screen.getByTestId('user-icon').querySelector('path');

    expect(path).toHaveAttribute('stroke', 'red');
    expect(path).toHaveAttribute('stroke-width', '1.66667');
    expect(path).toHaveAttribute('stroke-linecap', 'round');
    expect(path).toHaveAttribute('stroke-linejoin', 'round');
  });

  it('passes through additional native props', () => {
    render(<IconUser data-testid="user-icon" className="custom-class" aria-label="User" />);
    const svg = screen.getByTestId('user-icon');

    expect(svg).toHaveClass('custom-class');
    expect(svg).toHaveAttribute('aria-label', 'User');
  });
});
</file>

<file path="src/ui-kit/icons/IconUser.tsx">
import React from 'react';
import { IconProps } from './types';

export const IconUser: React.FC<IconProps> = ({
  size = 24,
  color = 'currentColor',
  ...nativeProps
}) => {
  return (
    <svg
      width={size}
      height={size}
      viewBox="0 0 20 20"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...nativeProps}
    >
      <path
        stroke={color}
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="1.66667"
        d="M16.6667 17.5C16.6667 16.337 16.6667 15.7555 16.5232 15.2824C16.2 14.217 15.3663 13.3834 14.301 13.0602C13.8278 12.9167 13.2463 12.9167 12.0834 12.9167H7.91671C6.75374 12.9167 6.17225 12.9167 5.69909 13.0602C4.63375 13.3834 3.80007 14.217 3.47691 15.2824C3.33337 15.7555 3.33337 16.337 3.33337 17.5M13.75 6.25C13.75 8.32107 12.0711 10 10 10C7.92897 10 6.25004 8.32107 6.25004 6.25C6.25004 4.17893 7.92897 2.5 10 2.5C12.0711 2.5 13.75 4.17893 13.75 6.25Z"
      />
    </svg>
  );
};
</file>

<file path="src/ui-kit/icons/types.ts">
import type { SVGProps } from 'react';

export type IconProps = SVGProps<SVGSVGElement> & {
  color?: string;
  size?: number | string;
};
</file>

<file path="src/ui-kit/utils/cn.ts">
import { type ClassValue, clsx } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}
</file>

<file path="src/ui-kit/Button.test.tsx">
import { describe, it, expect, vi } from 'vitest';
import { render, screen, fireEvent } from '@testing-library/react';
import { Button } from './Button';

describe('Button Component', () => {
  it('renders with primary variant by default', () => {
    render(<Button>Click me</Button>);
    const button = screen.getByRole('button', { name: /click me/i });
    expect(button).toHaveClass('btn-primary');
  });

  it('renders with secondary variant when specified', () => {
    render(<Button variant="secondary">Click me</Button>);
    const button = screen.getByRole('button', { name: /click me/i });
    expect(button).toHaveClass('btn-secondary');
  });

  it('handles click events', () => {
    const handleClick = vi.fn();
    render(<Button onClick={handleClick}>Click me</Button>);
    const button = screen.getByRole('button', { name: /click me/i });
    fireEvent.click(button);
    expect(handleClick).toHaveBeenCalledTimes(1);
  });

  it('merges additional className with base classes', () => {
    render(<Button className="custom-class">Click me</Button>);
    const button = screen.getByRole('button', { name: /click me/i });
    expect(button).toHaveClass('btn-primary', 'custom-class');
  });
});
</file>

<file path="src/ui-kit/Button.tsx">
import React from 'react';

interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary';
  children: React.ReactNode;
  icon?: React.ReactNode;
}

export const Button: React.FC<ButtonProps> = ({
  variant = 'primary',
  children,
  icon,
  className = '',
  ...props
}) => {
  const baseClass = variant === 'primary' ? 'btn-primary' : 'btn-secondary';

  return (
    <button className={`${baseClass} ${icon ? 'gap-2' : ''} ${className}`} {...props}>
      {icon && <span className="inline-flex items-center">{icon}</span>}
      {children}
    </button>
  );
};
</file>

<file path="src/ui-kit/Dropdown.test.tsx">
import { describe, it, expect, vi } from 'vitest';
import { render, screen, fireEvent } from '@testing-library/react';
import { Dropdown } from './Dropdown';
import React from 'react';

describe('Dropdown Component', () => {
  const mockItems = [
    { code: '1', label: 'Option 1', onClick: vi.fn() },
    { code: '2', label: 'Option 2', onClick: vi.fn() },
  ];

  it('renders with default state', () => {
    render(<Dropdown items={mockItems} />);
    expect(screen.getByText('Select an option')).toBeInTheDocument();
  });

  it('opens dropdown when clicked', () => {
    render(<Dropdown items={mockItems} />);
    const button = screen.getByRole('button');
    fireEvent.click(button);
    // After clicking, dropdown items should be visible
    const dropdownItems = screen.getAllByText(/Option [12]/);
    expect(dropdownItems).toHaveLength(2);
  });

  it('selects an item when clicked', () => {
    render(<Dropdown items={mockItems} />);
    const button = screen.getByRole('button');
    fireEvent.click(button);
    // Click the first option
    const options = screen.getAllByText(/Option \d/);
    fireEvent.click(options[0]);
    // Check if callback was called
    expect(mockItems[0].onClick).toHaveBeenCalledTimes(1);
    // Check if selected item is displayed in button
    const buttonText = screen.getByRole('button').textContent;
    expect(buttonText).toContain('Option 1');
    expect(buttonText).toContain('(1)');
  });

  it('closes when clicking outside', () => {
    render(
      <div>
        <div data-testid="outside">Outside</div>
        <Dropdown items={mockItems} />
      </div>
    );

    const button = screen.getByRole('button');
    fireEvent.click(button);
    expect(screen.getByText('(1)')).toBeInTheDocument();

    fireEvent.mouseDown(screen.getByTestId('outside'));
    expect(screen.queryByText('(1)')).not.toBeInTheDocument();
  });

  it('applies custom className', () => {
    render(<Dropdown items={mockItems} className="custom-class" />);
    const container = screen.getByRole('button').parentElement;
    expect(container).toHaveClass('custom-class');
  });

  // it('shows check icon for selected item', async () => {
  //   render(<Dropdown items={mockItems} />);
  //   // Open dropdown and select first item
  //   const button = screen.getByRole('button');
  //   fireEvent.click(button);
  //   const options = screen.getAllByText(/Option \d/);
  //   fireEvent.click(options[0]);
  //   // Open dropdown again to see check icon
  //   fireEvent.click(button);
  //   // The check icon should be next to the selected item
  //   const selectedItem = screen.getByText('Option 1').closest('.flex.items-center.justify-between');
  //   const checkIcon = selectedItem?.querySelector('[data-testid="check-icon"]');
  //   expect(checkIcon).toBeInTheDocument();
  // });
});
</file>

<file path="src/ui-kit/Dropdown.tsx">
import React, { useState, useRef, useEffect } from 'react';
import { IconCheck } from './icons/IconCheck';

interface DropdownItem {
  code: string;
  label: string;
  onClick: () => void;
}

interface DropdownProps {
  selectedItem?: DropdownItem;
  items: DropdownItem[];
  className?: string;
}

export const Dropdown: React.FC<DropdownProps> = ({ items, className = '' }) => {
  const [isOpen, setIsOpen] = useState(false);
  const [selected, setSelected] = useState<DropdownItem | null>(null);
  const dropdownRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const renderItem = (item: DropdownItem) => (
    <div className="flex items-center text-base">
      <span className="text-gray-400 font-normal">({item.code})</span>
      <span className="ml-2 font-normal">{item.label}</span>
    </div>
  );

  const handleSelect = (item: DropdownItem) => {
    setSelected(item);
    item.onClick();
  };

  return (
    <div className={`relative ${className}`} ref={dropdownRef}>
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="w-full px-6 py-4 text-left bg-white border border-gray-200 rounded-2xl hover:border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-100 focus:border-blue-300 transition-all duration-200"
      >
        {selected ? renderItem(selected) : 'Select an option'}
      </button>

      {isOpen && (
        <div className="absolute z-10 w-full mt-2 bg-white border border-gray-200 rounded-2xl shadow-lg overflow-hidden">
          {items.map((item, index) => (
            <div
              key={index}
              className="flex items-center justify-between px-6 py-4 cursor-pointer hover:bg-gray-50 transition-colors duration-150"
              onClick={() => handleSelect(item)}
            >
              {renderItem(item)}
              {selected?.code === item.code && (
                <IconCheck data-testid="check-icon" className="w-5 h-5 text-blue-600 ml-4" />
              )}
            </div>
          ))}
        </div>
      )}
    </div>
  );
};
</file>

<file path="src/ui-kit/Radio.test.tsx">
import { describe, it, expect, vi, afterEach } from 'vitest';
import { render, screen, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom';
import { Radio } from './Radio';
import React from 'react';
import gsap from 'gsap';

vi.mock('gsap');

describe('Radio Component', () => {
  afterEach(() => {
    vi.clearAllMocks();
  });

  it('renders correctly', () => {
    render(<Radio isChecked={false} handleClick={() => {}} id="test-radio" />);
    expect(screen.getByTestId('radio-input')).toBeInTheDocument();
  });

  it('handles click events', () => {
    const handleClick = vi.fn();
    render(<Radio isChecked={false} handleClick={handleClick} id="test-radio" />);
    fireEvent.click(screen.getByTestId('radio-input'));
    expect(handleClick).toHaveBeenCalledTimes(1);
  });

  it('reflects checked state', () => {
    render(<Radio isChecked={true} handleClick={() => {}} id="test-radio" />);
    expect(screen.getByTestId('radio-input')).toBeChecked();
    const label = screen.getByLabelText('');
    expect(label.parentElement?.querySelector('label')).toHaveClass('border-blue-600');
  });

  it('can be disabled', () => {
    render(<Radio isChecked={false} handleClick={() => {}} disabled id="test-radio" />);
    const input = screen.getByTestId('radio-input');
    expect(input).toBeDisabled();
    const label = screen.getByLabelText('');
    expect(label.parentElement?.querySelector('label')).toHaveClass('pointer-events-none');
  });

  it('applies custom className', () => {
    render(
      <Radio isChecked={false} handleClick={() => {}} className="custom-class" id="test-radio" />
    );
    const container = screen.getByTestId('radio-input').parentElement;
    expect(container).toHaveClass('custom-class');
  });

  it('applies correct border color when unchecked', () => {
    render(<Radio isChecked={false} handleClick={() => {}} id="test-radio" />);
    const label = screen.getByLabelText('');
    expect(label.parentElement?.querySelector('label')).toHaveClass('border-gray-200');
  });

  it('triggers animation when checked state changes', async () => {
    const { rerender } = render(<Radio isChecked={false} handleClick={() => {}} id="test-radio" />);
    // Clear initial animation call
    vi.clearAllMocks();

    // Change to checked state
    rerender(<Radio isChecked={true} handleClick={() => {}} id="test-radio" />);
    expect(gsap.to).toHaveBeenCalledWith(expect.any(HTMLDivElement), {
      scale: 1,
      ease: 'elastic.out(1.2,1)',
    });

    // Change back to unchecked state
    rerender(<Radio isChecked={false} handleClick={() => {}} id="test-radio" />);
    expect(gsap.to).toHaveBeenCalledWith(expect.any(HTMLDivElement), {
      scale: 0,
      ease: 'power2.inOut',
    });
  });
});
</file>

<file path="src/ui-kit/Radio.tsx">
import { cn } from './utils/cn';
import { InputHTMLAttributes, useEffect, useRef } from 'react';
import gsap from 'gsap';

interface RadioProps extends InputHTMLAttributes<HTMLInputElement> {
  isChecked: boolean;
  handleClick: () => void;
}

export const Radio = ({ isChecked, handleClick, className, ...nativeProps }: RadioProps) => {
  const circleRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    // Only run animations in browser environment
    if (typeof window !== 'undefined' && circleRef.current) {
      if (isChecked) {
        gsap.to(circleRef.current, {
          scale: 1,
          ease: 'elastic.out(1.2,1)',
        });
      } else {
        gsap.to(circleRef.current, {
          scale: 0,
          ease: 'power2.inOut',
        });
      }
    }
  }, [isChecked]);

  return (
    <div className={cn('inline-block', className)}>
      <input
        type="radio"
        hidden
        data-testid="radio-input"
        checked={isChecked}
        onClick={handleClick}
        onChange={() => null}
        disabled={nativeProps.disabled}
        {...nativeProps}
      />
      <label
        htmlFor={nativeProps.id}
        className={cn(
          'border-2 bg-white rounded-full w-6 h-6 flex items-center justify-center cursor-pointer',
          'transition-colors duration-200',
          isChecked ? 'border-blue-600' : 'border-gray-200',
          nativeProps.disabled && 'border-gray-100 pointer-events-none'
        )}
      >
        <div
          ref={circleRef}
          className={cn('w-3 h-3 rounded-full bg-blue-600')}
          style={{ transform: 'scale(0)' }}
        />
      </label>
    </div>
  );
};

Radio.displayName = 'Radio';
</file>

<file path="src/ui-kit/TextArea.test.tsx">
import { describe, it, expect } from 'vitest';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
import { TextArea } from './TextArea';
import React from 'react';

describe('TextArea Component', () => {
  it('renders correctly', () => {
    render(<TextArea placeholder="Enter text" />);
    expect(screen.getByPlaceholderText('Enter text')).toBeInTheDocument();
  });

  it('applies error styles when error prop is true', () => {
    render(<TextArea error data-testid="textarea" />);
    const textarea = screen.getByTestId('textarea');
    expect(textarea).toHaveClass('border-red-500');
  });

  it('applies custom className', () => {
    render(<TextArea className="custom-class" data-testid="textarea" />);
    const textarea = screen.getByTestId('textarea');
    expect(textarea).toHaveClass('custom-class');
  });

  it('forwards ref correctly', () => {
    const ref = React.createRef<HTMLTextAreaElement>();
    render(<TextArea ref={ref} data-testid="textarea" />);
    expect(ref.current).toBe(screen.getByTestId('textarea'));
  });

  it('passes through native textarea props', () => {
    render(
      <TextArea
        data-testid="textarea"
        disabled
        maxLength={100}
        placeholder="Test"
        value="Hello"
        readOnly
        rows={4}
      />
    );
    const textarea = screen.getByTestId('textarea');
    expect(textarea).toBeDisabled();
    expect(textarea).toHaveAttribute('maxLength', '100');
    expect(textarea).toHaveAttribute('placeholder', 'Test');
    expect(textarea).toHaveValue('Hello');
    expect(textarea).toHaveAttribute('readonly');
    expect(textarea).toHaveAttribute('rows', '4');
  });
});
</file>

<file path="src/ui-kit/TextArea.tsx">
import { cn } from './utils/cn';
import { TextareaHTMLAttributes, forwardRef } from 'react';

interface TextAreaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {
  error?: boolean;
}

export const TextArea = forwardRef<HTMLTextAreaElement, TextAreaProps>(
  ({ error, className, ...nativeProps }, ref) => {
    return (
      <textarea
        className={cn(
          'w-full h-full px-6 py-4 text-base bg-white border border-gray-200',
          'rounded-2xl',
          'hover:border-gray-300',
          'focus:outline-none focus:ring-2 focus:ring-blue-100 focus:border-blue-300',
          'transition-all duration-200',
          'resize-none overflow-y-auto',
          error && 'border-red-500 focus:border-red-500 focus:ring-red-100',
          className
        )}
        ref={ref}
        {...nativeProps}
      />
    );
  }
);

TextArea.displayName = 'TextArea';
</file>

<file path="src/ui-kit/TextInput.test.tsx">
import { describe, it, expect } from 'vitest';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
import { TextInput } from './TextInput';
import React from 'react';

describe('TextInput Component', () => {
  it('renders correctly', () => {
    render(<TextInput placeholder="Enter text" />);
    expect(screen.getByPlaceholderText('Enter text')).toBeInTheDocument();
  });

  it('applies error styles when error prop is true', () => {
    render(<TextInput error data-testid="input" />);
    const input = screen.getByTestId('input');
    expect(input).toHaveClass('border-red-500');
  });

  it('applies custom className', () => {
    render(<TextInput className="custom-class" data-testid="input" />);
    const input = screen.getByTestId('input');
    expect(input).toHaveClass('custom-class');
  });

  it('forwards ref correctly', () => {
    const ref = React.createRef<HTMLInputElement>();
    render(<TextInput ref={ref} data-testid="input" />);
    expect(ref.current).toBe(screen.getByTestId('input'));
  });

  it('passes through native input props', () => {
    render(
      <TextInput
        data-testid="input"
        disabled
        maxLength={10}
        placeholder="Test"
        value="Hello"
        readOnly
      />
    );
    const input = screen.getByTestId('input');
    expect(input).toBeDisabled();
    expect(input).toHaveAttribute('maxLength', '10');
    expect(input).toHaveAttribute('placeholder', 'Test');
    expect(input).toHaveValue('Hello');
    expect(input).toHaveAttribute('readonly');
  });
});
</file>

<file path="src/ui-kit/TextInput.tsx">
import { cn } from './utils/cn';
import { InputHTMLAttributes, forwardRef } from 'react';

interface TextInputProps extends InputHTMLAttributes<HTMLInputElement> {
  error?: boolean;
}

export const TextInput = forwardRef<HTMLInputElement, TextInputProps>(
  ({ error, className, ...nativeProps }, ref) => {
    return (
      <input
        className={cn(
          'w-full px-6 py-4 text-base bg-white border border-gray-200',
          'rounded-2xl',
          'hover:border-gray-300',
          'focus:outline-none focus:ring-2 focus:ring-blue-100 focus:border-blue-300',
          'transition-all duration-200',
          error && 'border-red-500 focus:border-red-500 focus:ring-red-100',
          className
        )}
        type="text"
        ref={ref}
        {...nativeProps}
      />
    );
  }
);

TextInput.displayName = 'TextInput';
</file>

<file path=".dockerignore">
Dockerfile
.dockerignore
node_modules
npm-debug.log
README.md
.env*
.next
.git
# Add more files and directories according to your porject needs
</file>

<file path=".editorconfig">
# Editor configuration, see http://editorconfig.org
root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
insert_final_newline = true
trim_trailing_whitespace = true

[*.md]
max_line_length = off
trim_trailing_whitespace = false
</file>

<file path=".env-sample">
OPENAI_API_KEY=your-api-key-here
MONGO_URI=your-mongodb-connection-string
SESSION_SECRET=your-secure-session-secret
</file>

<file path=".eslintignore">
node_modules
.next
build
dist
coverage
public
*.config.js
next-env.d.ts
</file>

<file path=".eslintrc.json">
{
  "root": true,
  "extends": ["next/core-web-vitals", "plugin:@typescript-eslint/recommended", "prettier"],
  "plugins": ["@typescript-eslint", "prettier"],
  "rules": {
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "argsIgnorePattern": "^_",
        "varsIgnorePattern": "^_",
        "caughtErrorsIgnorePattern": "^_"
      }
    ],
    "@typescript-eslint/no-explicit-any": "error",
    "prettier/prettier": "error"
  }
}
</file>

<file path=".gitignore">
# See https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files for more about ignoring files.

# compiled output
dist
tmp
out-tsc

# dependencies
node_modules

# IDEs and editors
/.idea
.project
.classpath
.c9/
*.launch
.settings/
*.sublime-workspace

# IDE - VSCode
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json

# misc
/.sass-cache
/connect.lock
/coverage
/libpeerconnection.log
npm-debug.log
yarn-error.log
testem.log
/typings

# System Files
.DS_Store
Thumbs.db

.nx/cache
.nx/workspace-data

vite.config.*.timestamp*
vitest.config.*.timestamp*
.env
.env.local
.next
</file>

<file path=".prettierignore">
node_modules
.next
build
dist
coverage
pnpm-lock.yaml
public
</file>

<file path=".prettierrc">
{
  "semi": true,
  "trailingComma": "es5",
  "singleQuote": true,
  "tabWidth": 2,
  "useTabs": false,
  "printWidth": 100,
  "bracketSpacing": true,
  "arrowParens": "avoid"
}
</file>

<file path="Dockerfile">
# syntax=docker.io/docker/dockerfile:1

# Base stage with pnpm support
FROM node:18-alpine AS base
RUN corepack enable && corepack prepare pnpm@latest --activate

# Dependencies stage
FROM base AS deps
WORKDIR /app

# Copy lockfile and package.json
COPY pnpm-lock.yaml package.json ./

# Install dependencies
RUN pnpm fetch && \
  pnpm install --offline --frozen-lockfile

# Builder stage
FROM base AS builder
WORKDIR /app

# Build arguments for environment variables
# ARG OPENAI_API_KEY
# ARG DATABASE_URL
# ARG NEXTAUTH_SECRET
# ARG NEXTAUTH_URL

# Convert build args to environment variables
# ENV OPENAI_API_KEY=${OPENAI_API_KEY}
# ENV DATABASE_URL=${DATABASE_URL}
# ENV NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
# ENV NEXTAUTH_URL=${NEXTAUTH_URL}

# Copy node_modules from deps stage
COPY --from=deps /app/node_modules ./node_modules

# Copy all source files
COPY . .

# Build the application
RUN pnpm build

# Production stage
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production

# Create non-root user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001

# Copy public directory
COPY --from=builder /app/public ./public

# Copy standalone output
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

# Set environment variables for Next.js
ENV PORT 3000
ENV HOSTNAME "0.0.0.0"

# Start command
CMD ["node", "server.js"]
</file>

<file path="next-env.d.ts">
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/pages/api-reference/config/typescript for more information.
</file>

<file path="next.config.js">
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  // Configure TypeScript compiler options
  typescript: {
    // !! WARN !!
    // Dangerously allow production builds to successfully complete even if
    // your project has type errors.
    // !! WARN !!
    ignoreBuildErrors: false,
  },
  pageExtensions: ['ts', 'tsx', 'js', 'jsx'],
  output: 'standalone', // Enable standalone output for Docker
};

module.exports = nextConfig;
</file>

<file path="package.json">
{
  "name": "@private-chatgpt/source",
  "version": "0.0.0",
  "license": "MIT",
  "scripts": {
    "build": "next build",
    "dev": "next dev",
    "start": "next start",
    "test": "vitest --run",
    "test:watch": "vitest --watch",
    "test:coverage": "vitest run --coverage",
    "lint": "eslint \"src/**/*.{ts,tsx}\"",
    "lint:fix": "eslint \"src/**/*.{ts,tsx}\" --fix",
    "format": "prettier --check .",
    "format:fix": "prettier --write .",
    "prepare": "husky install"
  },
  "private": true,
  "dependencies": {
    "@types/bcryptjs": "^2.4.6",
    "@types/express-session": "^1.18.1",
    "@types/mongoose": "^5.11.97",
    "@types/passport": "^1.0.17",
    "@types/passport-local": "^1.0.38",
    "@types/uuid": "^10.0.0",
    "bcryptjs": "^3.0.0",
    "clsx": "^2.1.1",
    "connect-mongo": "^5.1.0",
    "express-session": "^1.18.1",
    "gsap": "^3.12.7",
    "mongoose": "^8.9.5",
    "next": "15.1.3",
    "next-auth": "^4.24.11",
    "next-connect": "^1.0.0",
    "openai": "4.80.1",
    "passport": "^0.7.0",
    "passport-local": "^1.0.0",
    "pdf-parse": "1.1.1",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "react-pdftotext": "1.3.4",
    "tailwind-merge": "^2.6.0",
    "uuid": "^11.1.0"
  },
  "devDependencies": {
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.2.0",
    "@testing-library/user-event": "^14.6.1",
    "@types/express": "^5.0.0",
    "@types/node": "^22.10.5",
    "@types/react": "^19.0.2",
    "@types/react-dom": "^19.0.2",
    "@typescript-eslint/eslint-plugin": "^6.19.0",
    "@typescript-eslint/parser": "^6.19.0",
    "@vitejs/plugin-react": "4.3.4",
    "autoprefixer": "^10.4.20",
    "eslint": "^8.56.0",
    "eslint-config-next": "^15.1.3",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-prettier": "^5.2.1",
    "eslint-plugin-vitest": "0.5.4",
    "husky": "^8.0.0",
    "jsdom": "^25.0.1",
    "lint-staged": "^15.3.0",
    "node-mocks-http": "^1.16.2",
    "postcss": "^8.4.49",
    "prettier": "^3.4.2",
    "tailwindcss": "^3.4.17",
    "typescript": "^5.3.3",
    "vitest": "2.1.8"
  }
}
</file>

<file path="postcss.config.js">
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};
</file>

<file path="README.md">
# PrivateChatgpt

<a alt="Nx logo" href="https://nx.dev" target="_blank" rel="noreferrer"><img src="https://raw.githubusercontent.com/nrwl/nx/master/images/nx-logo.png" width="45"></a>

✨ Your new, shiny [Nx workspace](https://nx.dev) is almost ready ✨.

[Learn more about this workspace setup and its capabilities](https://nx.dev/getting-started/tutorials/react-monorepo-tutorial?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects) or run `npx nx graph` to visually explore what was created. Now, let's get you up to speed!

## Finish your CI setup

[Click here to finish setting up your workspace!](https://cloud.nx.app/connect/ZObGJnkstq)

## Run tasks

To run the dev server for your app, use:

```sh
npx nx serve private-chatgpt
```

To create a production bundle:

```sh
npx nx build private-chatgpt
```

To see all available targets to run for a project, run:

```sh
npx nx show project private-chatgpt
```

These targets are either [inferred automatically](https://nx.dev/concepts/inferred-tasks?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects) or defined in the `project.json` or `package.json` files.

[More about running tasks in the docs &raquo;](https://nx.dev/features/run-tasks?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)

## Add new projects

While you could add new projects to your workspace manually, you might want to leverage [Nx plugins](https://nx.dev/concepts/nx-plugins?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects) and their [code generation](https://nx.dev/features/generate-code?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects) feature.

Use the plugin's generator to create new projects.

To generate a new application, use:

```sh
npx nx g @nx/react:app demo
```

To generate a new library, use:

```sh
npx nx g @nx/react:lib mylib
```

You can use `npx nx list` to get a list of installed plugins. Then, run `npx nx list <plugin-name>` to learn about more specific capabilities of a particular plugin. Alternatively, [install Nx Console](https://nx.dev/getting-started/editor-setup?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects) to browse plugins and generators in your IDE.

[Learn more about Nx plugins &raquo;](https://nx.dev/concepts/nx-plugins?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects) | [Browse the plugin registry &raquo;](https://nx.dev/plugin-registry?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)

[Learn more about Nx on CI](https://nx.dev/ci/intro/ci-with-nx#ready-get-started-with-your-provider?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)

## Install Nx Console

Nx Console is an editor extension that enriches your developer experience. It lets you run tasks, generate code, and improves code autocompletion in your IDE. It is available for VSCode and IntelliJ.

[Install Nx Console &raquo;](https://nx.dev/getting-started/editor-setup?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)

## Useful links

Learn more:

- [Learn more about this workspace setup](https://nx.dev/getting-started/tutorials/react-monorepo-tutorial?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)
- [Learn about Nx on CI](https://nx.dev/ci/intro/ci-with-nx?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)
- [Releasing Packages with Nx release](https://nx.dev/features/manage-releases?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)
- [What are Nx plugins?](https://nx.dev/concepts/nx-plugins?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)

And join the Nx community:

- [Discord](https://go.nx.dev/community)
- [Follow us on X](https://twitter.com/nxdevtools) or [LinkedIn](https://www.linkedin.com/company/nrwl)
- [Our Youtube channel](https://www.youtube.com/@nxdevtools)
- [Our blog](https://nx.dev/blog?utm_source=nx_project&utm_medium=readme&utm_campaign=nx_projects)
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx}',
    './src/components/**/*.{js,ts,jsx,tsx}',
    './src/ui-kit/**/*.{js,ts,jsx,tsx}',
  ],
  theme: {
    extend: {
      // Custom button styles
      colors: {
        primary: {
          DEFAULT: '#4EADFF',
          hover: '#3B9EF3',
        },
        secondary: {
          DEFAULT: '#6B7280',
          hover: '#4B5563',
        },
      },
      // Custom spacing for components
      spacing: {
        button: '0.75rem 1.5rem',
        dropdown: '0.5rem 1rem',
      },
      // Custom border radius
      borderRadius: {
        button: '0.375rem',
        dropdown: '0.25rem',
      },
      // Custom animations
      keyframes: {
        'fade-in-up': {
          '0%': {
            opacity: '0',
            transform: 'translateY(20px)',
          },
          '100%': {
            opacity: '1',
            transform: 'translateY(0)',
          },
        },
      },
      animation: {
        'fade-in-up': 'fade-in-up 0.5s ease-out',
      },
    },
  },
  plugins: [],
};
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "baseUrl": ".",
    "paths": {
      "@/components/*": ["src/components/*"],
      "@/contexts/*": ["src/contexts/*"],
      "@/ui-kit/*": ["src/ui-kit/*"],
      "@/test/*": ["src/test/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}
</file>

<file path="vitest.config.ts">
/// <reference types="vitest" />

import { defineConfig } from 'vitest/config';
import react from '@vitejs/plugin-react';
import { resolve } from 'path';

export default defineConfig({
  plugins: [react()],
  test: {
    globals: true,
    environment: 'jsdom',
    setupFiles: './src/test/setup.ts',
    include: [
      'src/**/*.test.{ts,tsx}',
      'src/**/*.spec.{ts,tsx}',
      'src/pages/api/**/__tests__/**/*.test.{ts,tsx}',
    ],
    exclude: ['.next/**', 'node_modules/**', '**/node_modules/**', 'dist/**'],
    coverage: {
      reporter: ['text', 'json', 'html'],
    },
    server: {
      deps: {
        inline: [/^(?!.*vitest).*$/],
      },
    },
  },
  resolve: {
    alias: {
      '@': resolve(__dirname, './src'),
    },
  },
});
</file>

</files>
